{"version":3,"file":"json-translator.esm.js","sources":["../src/utils/micro.ts","../src/utils/console.ts","../src/core/ignorer.ts","../src/core/core.ts","../src/core/translator.ts","../src/core/json_object.ts","../src/core/json_file.ts","../src/index.ts","../src/core/proxy_file.ts","../src/cli/cli.ts","../src/index.ts"],"sourcesContent":["import { getLanguages } from '..';\r\nimport * as packageJSON from '../../package.json';\r\n\r\nexport function getLanguageFromCode(language_code: string) {\r\n  return getEnumKeyByEnumValue(getLanguages(), language_code);\r\n}\r\n\r\nexport function getCodeFromLanguage(language: string) {\r\n  let languages = getLanguages();\r\n  return (languages as any)[language as keyof typeof languages];\r\n}\r\n\r\nfunction getEnumKeyByEnumValue(\r\n  myEnum: any,\r\n  enumValue: number | string\r\n): string {\r\n  let keys = Object.keys(myEnum).filter(x => myEnum[x] === enumValue);\r\n  return keys.length > 0 ? keys[0] : '';\r\n}\r\n\r\nexport function translationStatistic(\r\n  totalTranslated: number,\r\n  totalTranslation: number\r\n): string {\r\n  return `${totalTranslated} of ${totalTranslation} translated.`;\r\n}\r\n\r\nexport const current_version = packageJSON.version;\r\nexport const default_value = '--';\r\nexport const translation_value_limit = 5000;\r\n","import { current_version } from './micro';\r\n\r\nconst cli_name = 'jsontt';\r\n\r\nconst success_color = '\\x1b[32m';\r\nconst error_color = '\\x1b[31m';\r\nconst info_color = '\\x1b[34m';\r\nconst warn_color = '\\x1b[33m';\r\n\r\nexport function success(message: string) {\r\n  console.log(success_color, `${message}`, '\\x1b[0m');\r\n}\r\n\r\nexport function error(message: string) {\r\n  console.log(error_color, `${message}`, '\\x1b[0m');\r\n}\r\n\r\nexport function info(message: string) {\r\n  console.log(info_color, `${message}`, '\\x1b[0m');\r\n}\r\n\r\nexport function warn(message: string) {\r\n  console.log(warn_color, `${message}`, '\\x1b[0m');\r\n}\r\n\r\nexport const commands = {\r\n  help1: '--help',\r\n  help2: '-h',\r\n};\r\n\r\nexport const language_choices: { [key: string]: string } = {\r\n  GoogleTranslate: `Google Translate (104 languages)`,\r\n  BingTranslate:\r\n    'Bing Microsoft Translate (110 languages) \\x1b[33m**NEW**\\x1b[0m',\r\n  LibreTranslate: `Libre Translate (29 languages)`,\r\n  ArgosTranslate: `Argos Translate (17 languages)`,\r\n};\r\n\r\nexport const messages = {\r\n  cli: {\r\n    welcome: `Welcome to the JSON translator. v${current_version}`,\r\n    usage: `Usage: \\n\\n\\t${cli_name} <path/file.json> \\n\\t${cli_name} <path/file.json> <path/proxy_list.txt> \\n\\t${cli_name} ${commands.help1} \\n\\t${cli_name} ${commands.help2}`,\r\n    from_source: 'From which source?',\r\n    from_message: 'From which language?',\r\n    to_message:\r\n      'To which language | languages? (Can select more than one with space bar)',\r\n    no_selected_language:\r\n      'You didn`t select any language. Please try it again and select languages with the space bar.',\r\n    creation_done:\r\n      'All files are created! You can find them in the same folder as the original JSON file.',\r\n  },\r\n  object: {},\r\n  file: {\r\n    no_path: `The path is not provided.`,\r\n    no_file_in_path: `Could not find the file in the path.`,\r\n    cannot_translate: `Could not translate the file.`,\r\n    cannot_save_file: `Could not save the file.`,\r\n  },\r\n};\r\n","export function map(\r\n  str: string\r\n): {\r\n  word: string;\r\n  double_brackets_map: { [key: string]: string };\r\n  single_brackets_map: { [key: string]: string };\r\n} {\r\n  // encode urls if exists in the str\r\n  str = urlEncoder(str);\r\n\r\n  let {\r\n    map: double_brackets_map,\r\n    word: initial_ignored_word,\r\n  } = mapByDoubleBracket(str);\r\n  let { map: single_brackets_map, word: ignored_word } = mapBySingleBracket(\r\n    initial_ignored_word\r\n  );\r\n\r\n  return {\r\n    word: ignored_word,\r\n    double_brackets_map,\r\n    single_brackets_map: single_brackets_map,\r\n  };\r\n}\r\n\r\nexport function unMap(\r\n  str: string,\r\n  double_brackets_map: object,\r\n  single_brackets_map: object\r\n): string {\r\n  let word = unmapBySingleBracket(str, single_brackets_map);\r\n  word = unmapByDoubleBracket(word, double_brackets_map);\r\n\r\n  // decode urls if exists in the str\r\n  word = urlDecoder(word);\r\n\r\n  return word;\r\n}\r\n\r\nfunction mapBySingleBracket(\r\n  str: string\r\n): { word: string; map: { [key: string]: string } } {\r\n  return mapIgnoredValues(str, '{', '}', '{', '}');\r\n}\r\n\r\nfunction unmapBySingleBracket(str: string, map: object): string {\r\n  return unmapIgnoredValues(str, map, '{', '}', '{', '}');\r\n}\r\n\r\nfunction mapByDoubleBracket(\r\n  str: string\r\n): { word: string; map: { [key: string]: string } } {\r\n  return mapIgnoredValues(str, '{{', '}}', '{', '}');\r\n}\r\n\r\nfunction unmapByDoubleBracket(str: string, map: object): string {\r\n  return unmapIgnoredValues(str, map, '{{', '}}', '{', '}');\r\n}\r\n\r\nfunction mapIgnoredValues(\r\n  str: string,\r\n  start: string,\r\n  end: string,\r\n  replaced_start: string,\r\n  replaced_end: string\r\n): { word: string; map: { [key: string]: string } } {\r\n  let counter = 0;\r\n  let map: { [key: string]: string } = {};\r\n\r\n  let regex = new RegExp(`${start}(.*?)${end}`, 'g');\r\n\r\n  let new_str = str.replace(regex, function(word) {\r\n    word = word.substring(start.length, word.length - end.length);\r\n\r\n    // const key = \"*\".repeat(counter)\r\n    const key = counter;\r\n\r\n    map[`${key}`] = word;\r\n\r\n    let locked_ignored = replaced_start + key + replaced_end;\r\n\r\n    counter++;\r\n    return locked_ignored;\r\n  });\r\n\r\n  return { word: new_str, map: map };\r\n}\r\n\r\nfunction unmapIgnoredValues(\r\n  str: string,\r\n  map: object,\r\n  start: string,\r\n  end: string,\r\n  replaced_start: string,\r\n  replaced_end: string\r\n): string {\r\n  for (const [key, value] of Object.entries(map)) {\r\n    let for_replace = replaced_start + key + replaced_end;\r\n\r\n    str = str.replace(for_replace, start + value + end);\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n// URL detector & encode AND decoder\r\nfunction urlEncoder(text: string): string {\r\n  // url finder regex => url\r\n  const regex = /(?:(?:https?|ftp|file):\\/\\/|www\\.|ftp\\.)(?:\\([-A-Z0-9+&@#\\/%=~_|$?!;:,.]*\\)|[-A-Z0-9+&@#\\/%=~_|$?!;:,.])*(?:\\([-A-Z0-9+&@#\\/%=~_|$?!;:,.]*\\)|[A-Z0-9+&@#\\/%=~_|$])/gim;\r\n\r\n  let new_text = text.replace(regex, function(url) {\r\n    url = `{` + url + `}`;\r\n    return url;\r\n  });\r\n\r\n  return new_text;\r\n}\r\n\r\nfunction urlDecoder(text: string): string {\r\n  // url finder regex => {url}\r\n  const regex = /{(?:(?:https?|ftp|file):\\/\\/|www\\.|ftp\\.)(?:\\([-A-Z0-9+&@#\\/%=~_|$?!;:,.]*\\)|[-A-Z0-9+&@#\\/%=~_|$?!;:,.])*(?:\\([-A-Z0-9+&@#\\/%=~_|$?!;:,.]*\\)|[A-Z0-9+&@#\\/%=~_|$])}/gim;\r\n\r\n  let new_text = text.replace(regex, function(url) {\r\n    url = url.substring(1, url.length - 1);\r\n    return url;\r\n  });\r\n\r\n  return new_text;\r\n}\r\n","import * as fs from 'fs/promises';\r\nimport { error, messages } from '../utils/console';\r\nimport { default_value, translation_value_limit } from '../utils/micro';\r\n\r\nexport async function getFile(objectPath: string) {\r\n  let json_file: any = undefined;\r\n\r\n  await fs\r\n    .readFile(objectPath, 'utf8')\r\n    .then(data => {\r\n      json_file = data;\r\n    })\r\n    .catch(_ => {\r\n      json_file = undefined;\r\n    });\r\n\r\n  return json_file;\r\n}\r\n\r\nexport function getRootFolder(path: string) {\r\n  let arr = path.split('/');\r\n  arr.pop();\r\n\r\n  let root = arr.join('/');\r\n\r\n  if (root === undefined || root === '') {\r\n    root = './';\r\n  }\r\n\r\n  return root;\r\n}\r\n\r\nexport async function saveFilePublic(path: string, data: any) {\r\n  var json = JSON.stringify(data);\r\n\r\n  await fs\r\n    .writeFile(path, json, 'utf8')\r\n    .then(_ => {})\r\n    .catch(_ => {\r\n      error(messages.file.cannot_save_file);\r\n    });\r\n}\r\n\r\nexport function safeValueTransition(value: string) {\r\n  const value_safety: ValueSafety = valueIsSafe(value);\r\n\r\n  if (value_safety.is_safe === true) {\r\n    return value;\r\n  }\r\n\r\n  switch (value_safety.type) {\r\n    case nonSafeTypes.null:\r\n    case nonSafeTypes.undefined:\r\n    case nonSafeTypes.empty:\r\n      value = default_value;\r\n      break;\r\n    case nonSafeTypes.long:\r\n      value = value.substring(0, translation_value_limit);\r\n      break;\r\n  }\r\n\r\n  return value;\r\n}\r\n\r\nfunction valueIsSafe(value: string): ValueSafety {\r\n  let result: ValueSafety = {\r\n    is_safe: true,\r\n    type: undefined,\r\n  };\r\n\r\n  if (value === undefined) {\r\n    result.is_safe = false;\r\n    result['type'] = nonSafeTypes.undefined;\r\n\r\n    return result;\r\n  }\r\n\r\n  if (value === null) {\r\n    result.is_safe = false;\r\n    result['type'] = nonSafeTypes.null;\r\n\r\n    return result;\r\n  }\r\n\r\n  if (value.length >= translation_value_limit) {\r\n    result.is_safe = false;\r\n    result['type'] = nonSafeTypes.long;\r\n\r\n    return result;\r\n  }\r\n\r\n  if (value === '') {\r\n    result.is_safe = false;\r\n    result['type'] = nonSafeTypes.empty;\r\n\r\n    return result;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\ninterface ValueSafety {\r\n  is_safe: boolean;\r\n  type: nonSafeTypes | undefined;\r\n}\r\n\r\nenum nonSafeTypes {\r\n  'long',\r\n  'undefined',\r\n  'null',\r\n  'empty',\r\n}\r\n","import translate from '@vitalets/google-translate-api';\r\nimport * as bingTranslator from 'bing-translate-api';\r\nimport createHttpProxyAgent from 'http-proxy-agent';\r\nimport { LanguageCode, Sources } from '..';\r\nimport { warn } from '../utils/console';\r\nimport { default_value } from '../utils/micro';\r\nimport axios from 'axios';\r\nimport * as ignorer from './ignorer';\r\nimport { safeValueTransition } from './core';\r\n\r\nexport async function plaintranslate(\r\n  str: string,\r\n  from: LanguageCode,\r\n  to: LanguageCode\r\n): Promise<string> {\r\n  // STEP: map the subset of string need to be ignored\r\n  let {\r\n    word: ignored_str,\r\n    double_brackets_map,\r\n    single_brackets_map,\r\n  } = ignorer.map(str);\r\n\r\n  // STEP: translate in try-catch to keep continuity\r\n  try {\r\n    // STEP: translate with proper source\r\n    let translatedStr = await translateSourceFunction(global.source)(\r\n      ignored_str,\r\n      from,\r\n      to\r\n    );\r\n\r\n    // STEP: put ignored values back\r\n    translatedStr = ignorer.unMap(\r\n      translatedStr,\r\n      double_brackets_map,\r\n      single_brackets_map\r\n    );\r\n\r\n    global.totalTranslated = global.totalTranslated + 1;\r\n\r\n    return translatedStr;\r\n  } catch (e) {\r\n    // error case -> return\r\n    warn(\r\n      `\\nerror while translating \\n\\t\"${str}\" \\nassigned \"--\" instead of exit from cli.`\r\n    );\r\n\r\n    global.totalTranslated = global.totalTranslated + 1;\r\n\r\n    return default_value;\r\n  }\r\n}\r\n\r\nfunction translateSourceFunction(source: string) {\r\n  switch (source) {\r\n    case Sources.LibreTranslate:\r\n      return translateWithLibre;\r\n    case Sources.ArgosTranslate:\r\n      return translateWithArgos;\r\n    case Sources.BingTranslate:\r\n      return translateWithBing;\r\n    default:\r\n      return translateWithGoogle;\r\n  }\r\n}\r\n\r\nasync function translateWithLibre(\r\n  str: string,\r\n  from: LanguageCode,\r\n  to: LanguageCode\r\n): Promise<string> {\r\n  let body = {\r\n    q: safeValueTransition(str),\r\n    source: from,\r\n    target: to,\r\n    format: 'text',\r\n    api_key: '',\r\n    secret: '2NEKGMB',\r\n  };\r\n\r\n  const { data } = await axios.post(\r\n    'https://libretranslate.com/translate',\r\n    body,\r\n    {\r\n      headers: {\r\n        Origin: 'https://libretranslate.com',\r\n      },\r\n    }\r\n  );\r\n\r\n  return data?.translatedText ? data?.translatedText : default_value;\r\n}\r\n\r\nasync function translateWithArgos(\r\n  str: string,\r\n  from: LanguageCode,\r\n  to: LanguageCode\r\n): Promise<string> {\r\n  let body = {\r\n    q: safeValueTransition(str),\r\n    source: from,\r\n    target: to,\r\n  };\r\n\r\n  const { data } = await axios.post(\r\n    'https://translate.argosopentech.com/translate',\r\n    body,\r\n    {\r\n      headers: {\r\n        Origin: 'https://translate.argosopentech.com',\r\n        Referer: 'https://translate.argosopentech.com',\r\n      },\r\n    }\r\n  );\r\n\r\n  return data?.translatedText ? data?.translatedText : default_value;\r\n}\r\n\r\nasync function translateWithBing(\r\n  str: string,\r\n  from: LanguageCode,\r\n  to: LanguageCode\r\n): Promise<string> {\r\n  const { translation } = await bingTranslator.translate(\r\n    safeValueTransition(str),\r\n    from,\r\n    to,\r\n    false\r\n  );\r\n\r\n  return translation;\r\n}\r\n\r\nasync function translateWithGoogle(\r\n  str: string,\r\n  from: LanguageCode,\r\n  to: LanguageCode\r\n): Promise<string> {\r\n  // STEP: if proxy list provided\r\n  if (\r\n    global.proxyList &&\r\n    global.proxyList.length > 0 &&\r\n    global.proxyIndex !== -1\r\n  ) {\r\n    let proxy = global.proxyList[global.proxyIndex];\r\n\r\n    // STEP: new proxy exist\r\n    if (proxy) {\r\n      let agent = createHttpProxyAgent(`http://${proxy}`);\r\n\r\n      let translatedStr = await translateWithGoogleByProxySupport(\r\n        str,\r\n        from,\r\n        to,\r\n        {\r\n          agent,\r\n          timeout: 4000,\r\n        }\r\n      );\r\n\r\n      return translatedStr;\r\n    } else {\r\n      warn('No new proxy exists, continuing without proxy');\r\n      global.proxyIndex = -1;\r\n\r\n      let translatedStr = await translateWithGoogleByProxySupport(\r\n        str,\r\n        from,\r\n        to\r\n      );\r\n\r\n      return translatedStr;\r\n    }\r\n  } else {\r\n    // STEP: translate without proxy\r\n    let translatedStr = await translateWithGoogleByProxySupport(str, from, to);\r\n\r\n    return translatedStr;\r\n  }\r\n}\r\n\r\nasync function translateWithGoogleByProxySupport(\r\n  str: string,\r\n  from: LanguageCode,\r\n  to: LanguageCode,\r\n  options?: { agent: any; timeout: number }\r\n) {\r\n  const { text } = await translate(\r\n    safeValueTransition(str),\r\n    {\r\n      from: from,\r\n      to: to,\r\n    },\r\n    {\r\n      agent: options !== undefined ? options.agent : undefined,\r\n    }\r\n  );\r\n\r\n  return text;\r\n}\r\n","import { LanguageCode, LanguageCodes, translatedObject } from '..';\r\nimport { plaintranslate } from './translator';\r\nimport { TaskQueue } from 'cwait';\r\nimport { Promise as bluebirdPromise } from 'bluebird';\r\nconst MAX_SIMULTANEOUS_REQUEST = 3;\r\n\r\nvar queue = new TaskQueue(bluebirdPromise, MAX_SIMULTANEOUS_REQUEST);\r\n\r\nexport async function objectTranslator(\r\n  object: translatedObject,\r\n  from: LanguageCode,\r\n  to: LanguageCode | LanguageCodes\r\n): Promise<translatedObject | translatedObject[]> {\r\n  if (object && from && to) {\r\n    // need to translate to more than 1 languages\r\n    if (typeof to === 'object') {\r\n      let general_object: translatedObject[] | null[] = [];\r\n\r\n      await Promise.all(\r\n        Object.keys(to as LanguageCodes).map(async function(index) {\r\n          const index_as_num = Number(index);\r\n          const copy_object = JSON.parse(JSON.stringify(object));\r\n\r\n          general_object[index_as_num] = await deepDiver(\r\n            copy_object,\r\n            from,\r\n            to[index_as_num]\r\n          );\r\n        })\r\n      );\r\n\r\n      return general_object as translatedObject[];\r\n    } else {\r\n      await deepDiver(object, from, to);\r\n\r\n      return object as translatedObject;\r\n    }\r\n  } else {\r\n    throw new Error(\r\n      `Undefined values detected. Available ones: object: ${!!object}, from: ${!!from}, to: ${!!to}`\r\n    );\r\n  }\r\n}\r\n\r\nexport async function deepDiver(\r\n  object: translatedObject,\r\n  from: LanguageCode,\r\n  to: LanguageCode\r\n): Promise<translatedObject | null> {\r\n  var has = Object.prototype.hasOwnProperty.bind(object);\r\n\r\n  if (object === null) {\r\n    return null;\r\n  }\r\n\r\n  await Promise.all(\r\n    Object.keys(object).map(async function(k) {\r\n      if (has(k)) {\r\n        switch (typeof object[k]) {\r\n          case 'object':\r\n            await deepDiver(object[k], from, to);\r\n            break;\r\n          case 'string':\r\n            global.totalTranslation = global.totalTranslation + 1;\r\n\r\n            return queue.add(async () => {\r\n              return await plaintranslate(object[k], from, to)\r\n                .then(data => {\r\n                  object[k] = data;\r\n                })\r\n                .catch(err => {\r\n                  // TODO: return error\r\n                  console.log('Translation error:', err);\r\n                });\r\n            });\r\n        }\r\n      }\r\n    })\r\n  );\r\n\r\n  return object;\r\n}\r\n","import { LanguageCode, LanguageCodes, translatedObject } from '..';\r\nimport { error, messages, success } from '../utils/console';\r\nimport { getLanguageFromCode } from '../utils/micro';\r\nimport { getFile, getRootFolder, saveFilePublic } from './core';\r\nimport { objectTranslator } from './json_object';\r\n\r\nexport async function fileTranslator(\r\n  objectPath: string,\r\n  from: LanguageCode,\r\n  to: LanguageCode | LanguageCodes\r\n) {\r\n  let file_from_path = await getFileFromPath(objectPath);\r\n\r\n  let { json_obj } = file_from_path;\r\n  objectPath = file_from_path.objectPath;\r\n\r\n  if (json_obj === undefined) {\r\n    error(messages.file.no_file_in_path);\r\n    return;\r\n  }\r\n\r\n  json_obj = { data: JSON.parse(json_obj) };\r\n\r\n  let new_json_obj = await objectTranslator(json_obj, from, to);\r\n\r\n  if (new_json_obj === undefined) {\r\n    error(messages.file.cannot_translate);\r\n    return;\r\n  }\r\n\r\n  let latest_path = objectPath.replace(/\\\\/g, '/');\r\n  let root_folder = getRootFolder(latest_path);\r\n\r\n  if (Array.isArray(new_json_obj) === true && Array.isArray(to) === true) {\r\n    // multiple file saving\r\n    (new_json_obj as Array<translatedObject>).forEach(\r\n      async (element, index) => {\r\n        const current_json_obj = element.data;\r\n\r\n        let file_name = `/${to[index]}.json`;\r\n\r\n        await saveFilePublic(root_folder + file_name, current_json_obj);\r\n\r\n        success(\r\n          `For ${getLanguageFromCode(to[index])} --> ${to[index]}.json created.`\r\n        );\r\n      }\r\n    );\r\n  } else {\r\n    new_json_obj = (new_json_obj as translatedObject).data;\r\n\r\n    let file_name = `/${to}.json`;\r\n\r\n    await saveFilePublic(root_folder + file_name, new_json_obj);\r\n\r\n    success(`For ${getLanguageFromCode(to as string)} --> ${to}.json created.`);\r\n  }\r\n}\r\n\r\nexport async function getFileFromPath(\r\n  objectPath: string\r\n): Promise<{ json_obj: any; objectPath: string }> {\r\n  let json_obj: any = await getFile(objectPath);\r\n\r\n  if (json_obj === undefined) {\r\n    objectPath = __dirname + '\\\\' + objectPath;\r\n\r\n    json_obj = await getFile(objectPath);\r\n  }\r\n\r\n  return { json_obj, objectPath };\r\n}\r\n","import { initializeCli } from './cli/cli';\r\nimport { plaintranslate } from './core/translator';\r\nimport { fileTranslator } from './core/json_file';\r\nimport { objectTranslator } from './core/json_object';\r\n\r\nexport async function translateWord(\r\n  word: string,\r\n  from: LanguageCode,\r\n  to: LanguageCode\r\n) {\r\n  return await plaintranslate(word, from, to);\r\n}\r\n\r\nexport async function translateObject(\r\n  object: translatedObject,\r\n  from: LanguageCode,\r\n  to: LanguageCode | LanguageCodes\r\n): Promise<translatedObject | translatedObject[]> {\r\n  let hard_copy = JSON.parse(JSON.stringify(object));\r\n\r\n  return objectTranslator(hard_copy, from, to);\r\n}\r\n\r\nexport async function translateFile(\r\n  objectPath: string,\r\n  from: LanguageCode,\r\n  to: LanguageCode | LanguageCodes\r\n) {\r\n  return fileTranslator(objectPath, from, to);\r\n}\r\n\r\nexport async function runCli() {\r\n  initializeCli();\r\n}\r\n\r\nexport enum Sources {\r\n  GoogleTranslate = 'GoogleTranslate',\r\n  LibreTranslate = 'LibreTranslate',\r\n  ArgosTranslate = 'ArgosTranslate',\r\n  BingTranslate = 'BingTranslate',\r\n}\r\n\r\n// default\r\nglobal.source = Sources.GoogleTranslate;\r\n\r\n// TYPES\r\nexport interface translatedObject {\r\n  [key: string]: any;\r\n}\r\n\r\nexport type LanguageCode = string;\r\nexport type LanguageCodes = LanguageCode[];\r\n\r\nexport function getLanguages() {\r\n  if (global.source === Sources.LibreTranslate) {\r\n    return LibreTranslateLanguages;\r\n  } else if (global.source === Sources.ArgosTranslate) {\r\n    return ArgosTranslateLanguages;\r\n  } else if (global.source === Sources.BingTranslate) {\r\n    return BingTranslateLanguages;\r\n  }\r\n\r\n  return GoogleTranslateLanguages;\r\n}\r\n\r\nenum LibreTranslateLanguages {\r\n  Automatic = 'auto',\r\n  English = 'en',\r\n  Arabic = 'ar',\r\n  Azerbaijani = 'az',\r\n  Chinese = 'zh',\r\n  Czech = 'cs',\r\n  Danish = 'da',\r\n  Dutch = 'nl',\r\n  Esperanto = 'eo',\r\n  Finnish = 'fi',\r\n  French = 'fr',\r\n  German = 'de',\r\n  Greek = 'el',\r\n  Hebrew = 'iw',\r\n  Hindi = 'hi',\r\n  Hungarian = 'hu',\r\n  Indonesian = 'id',\r\n  Irish = 'ga',\r\n  Italian = 'it',\r\n  Japanese = 'ja',\r\n  Korean = 'ko',\r\n  Persian = 'fa',\r\n  Polish = 'pl',\r\n  Portuguese = 'pt',\r\n  Russian = 'ru',\r\n  Slovak = 'sk',\r\n  Spanish = 'es',\r\n  Swedish = 'sv',\r\n  Turkish = 'tr',\r\n  Ukrainian = 'uk',\r\n}\r\n\r\nenum ArgosTranslateLanguages {\r\n  Automatic = 'auto',\r\n  English = 'en',\r\n  Arabic = 'ar',\r\n  Chinese = 'zh',\r\n  French = 'fr',\r\n  German = 'de',\r\n  Hindi = 'hi',\r\n  Indonesian = 'id',\r\n  Irish = 'ga',\r\n  Italian = 'it',\r\n  Japanese = 'ja',\r\n  Korean = 'ko',\r\n  Polish = 'pl',\r\n  Portuguese = 'pt',\r\n  Russian = 'ru',\r\n  Spanish = 'es',\r\n  Turkish = 'tr',\r\n  Vietnamese = 'vi',\r\n}\r\n\r\nenum GoogleTranslateLanguages {\r\n  Automatic = 'auto',\r\n  Afrikaans = 'af',\r\n  Albanian = 'sq',\r\n  Amharic = 'am',\r\n  Arabic = 'ar',\r\n  Armenian = 'hy',\r\n  Azerbaijani = 'az',\r\n  Basque = 'eu',\r\n  Belarusian = 'be',\r\n  Bengali = 'bn',\r\n  Bosnian = 'bs',\r\n  Bulgarian = 'bg',\r\n  Catalan = 'ca',\r\n  Cebuano = 'ceb',\r\n  Chichewa = 'ny',\r\n  Chinese_Simplified = 'zh-CN',\r\n  Chinese_Traditional = 'zh-TW',\r\n  Corsican = 'co',\r\n  Croatian = 'hr',\r\n  Czech = 'cs',\r\n  Danish = 'da',\r\n  Dutch = 'nl',\r\n  English = 'en',\r\n  Esperanto = 'eo',\r\n  Estonian = 'et',\r\n  Filipino = 'tl',\r\n  Finnish = 'fi',\r\n  French = 'fr',\r\n  Frisian = 'fy',\r\n  Galician = 'gl',\r\n  Georgian = 'ka',\r\n  German = 'de',\r\n  Greek = 'el',\r\n  Gujarati = 'gu',\r\n  Haitian_Creole = 'ht',\r\n  Hausa = 'ha',\r\n  Hawaiian = 'haw',\r\n  Hebrew = 'iw',\r\n  Hindi = 'hi',\r\n  Hmong = 'hmn',\r\n  Hungarian = 'hu',\r\n  Icelandic = 'is',\r\n  Igbo = 'ig',\r\n  Indonesian = 'id',\r\n  Irish = 'ga',\r\n  Italian = 'it',\r\n  Japanese = 'ja',\r\n  Javanese = 'jw',\r\n  Kannada = 'kn',\r\n  Kazakh = 'kk',\r\n  Khmer = 'km',\r\n  Korean = 'ko',\r\n  Kurdish_Kurmanji = 'ku',\r\n  Kyrgyz = 'ky',\r\n  Lao = 'lo',\r\n  Latin = 'la',\r\n  Latvian = 'lv',\r\n  Lithuanian = 'lt',\r\n  Luxembourgish = 'lb',\r\n  Macedonian = 'mk',\r\n  Malagasy = 'mg',\r\n  Malay = 'ms',\r\n  Malayalam = 'ml',\r\n  Maltese = 'mt',\r\n  Maori = 'mi',\r\n  Marathi = 'mr',\r\n  Mongolian = 'mn',\r\n  Myanmar_Burmese = 'my',\r\n  Nepali = 'ne',\r\n  Norwegian = 'no',\r\n  Pashto = 'ps',\r\n  Persian = 'fa',\r\n  Polish = 'pl',\r\n  Portuguese = 'pt',\r\n  Punjabi = 'pa',\r\n  Romanian = 'ro',\r\n  Russian = 'ru',\r\n  Samoan = 'sm',\r\n  Scots_Gaelic = 'gd',\r\n  Serbian = 'sr',\r\n  Sesotho = 'st',\r\n  Shona = 'sn',\r\n  Sindhi = 'sd',\r\n  Sinhala = 'si',\r\n  Slovak = 'sk',\r\n  Slovenian = 'sl',\r\n  Somali = 'so',\r\n  Spanish = 'es',\r\n  Sundanese = 'su',\r\n  Swahili = 'sw',\r\n  Swedish = 'sv',\r\n  Tajik = 'tg',\r\n  Tamil = 'ta',\r\n  Telugu = 'te',\r\n  Thai = 'th',\r\n  Turkish = 'tr',\r\n  Ukrainian = 'uk',\r\n  Urdu = 'ur',\r\n  Uzbek = 'uz',\r\n  Vietnamese = 'vi',\r\n  Welsh = 'cy',\r\n  Xhosa = 'xh',\r\n  Yiddish = 'yi',\r\n  Yoruba = 'yo',\r\n  Zulu = 'zu',\r\n}\r\n\r\nenum BingTranslateLanguages {\r\n  Automatic = 'auto-detect',\r\n  Afrikaans = 'af',\r\n  Albanian = 'sq',\r\n  Amharic = 'am',\r\n  Arabic = 'ar',\r\n  Armenian = 'hy',\r\n  Assamese = 'as',\r\n  Azerbaijani = 'az',\r\n  Bangla = 'bn',\r\n  Bashkir = 'ba',\r\n  Basque = 'eu',\r\n  Bosnian = 'bs',\r\n  Bulgarian = 'bg',\r\n  Cantonese_Traditional = 'yue',\r\n  Catalan = 'ca',\r\n  Chinese_Literary = 'lzh',\r\n  Chinese_Simplified = 'zh-Hans',\r\n  Chinese_Traditional = 'zh-Hant',\r\n  Croatian = 'hr',\r\n  Czech = 'cs',\r\n  Danish = 'da',\r\n  Dari = 'prs',\r\n  Divehi = 'dv',\r\n  Dutch = 'nl',\r\n  English = 'en',\r\n  Estonian = 'et',\r\n  Faroese = 'fo',\r\n  Fijian = 'fj',\r\n  Filipino = 'fil',\r\n  Finnish = 'fi',\r\n  French = 'fr',\r\n  French_Canada = 'fr-CA',\r\n  Galician = 'gl',\r\n  Georgian = 'ka',\r\n  German = 'de',\r\n  Greek = 'el',\r\n  Gujarati = 'gu',\r\n  Haitian_Creole = 'ht',\r\n  Hebrew = 'he',\r\n  Hindi = 'hi',\r\n  Hmong_Daw = 'mww',\r\n  Hungarian = 'hu',\r\n  Icelandic = 'is',\r\n  Indonesian = 'id',\r\n  Inuinnaqtun = 'ikt',\r\n  Inuktitut = 'iu',\r\n  Inuktitut_Latin = 'iu-Latn',\r\n  Irish = 'ga',\r\n  Italian = 'it',\r\n  Japanese = 'ja',\r\n  Kannada = 'kn',\r\n  Kazakh = 'kk',\r\n  Khmer = 'km',\r\n  Klingon_Latin = 'tlh-Latn',\r\n  Korean = 'ko',\r\n  Kurdish_Central = 'ku',\r\n  Kurdish_Northern = 'kmr',\r\n  Kyrgyz = 'ky',\r\n  Lao = 'lo',\r\n  Latvian = 'lv',\r\n  Lithuanian = 'lt',\r\n  Macedonian = 'mk',\r\n  Malagasy = 'mg',\r\n  Malay = 'ms',\r\n  Malayalam = 'ml',\r\n  Maltese = 'mt',\r\n  Marathi = 'mr',\r\n  Mongolian_Cyrillic = 'mn-Cyrl',\r\n  Mongolian_Traditional = 'mn-Mong',\r\n  Myanmar_Burmese = 'my',\r\n  Māori = 'mi',\r\n  Nepali = 'ne',\r\n  Norwegian = 'nb',\r\n  Odia = 'or',\r\n  Pashto = 'ps',\r\n  Persian = 'fa',\r\n  Polish = 'pl',\r\n  Portuguese_Brazil = 'pt',\r\n  Portuguese_Portugal = 'pt-PT',\r\n  Punjabi = 'pa',\r\n  Querétaro_Otomi = 'otq',\r\n  Romanian = 'ro',\r\n  Russian = 'ru',\r\n  Samoan = 'sm',\r\n  Serbian_Cyrillic = 'sr-Cyrl',\r\n  Serbian_Latin = 'sr-Latn',\r\n  Slovak = 'sk',\r\n  Slovenian = 'sl',\r\n  Somali = 'so',\r\n  Spanish = 'es',\r\n  Swahili = 'sw',\r\n  Swedish = 'sv',\r\n  Tahitian = 'ty',\r\n  Tamil = 'ta',\r\n  Tatar = 'tt',\r\n  Telugu = 'te',\r\n  Thai = 'th',\r\n  Tibetan = 'bo',\r\n  Tigrinya = 'ti',\r\n  Tongan = 'to',\r\n  Turkish = 'tr',\r\n  Turkmen = 'tk',\r\n  Ukrainian = 'uk',\r\n  Upper_Sorbian = 'hsb',\r\n  Urdu = 'ur',\r\n  Uyghur = 'ug',\r\n  Uzbek_Latin = 'uz',\r\n  Vietnamese = 'vi',\r\n  Welsh = 'cy',\r\n  Yucatec_Maya = 'yua',\r\n  Zulu = 'zu',\r\n}\r\n\r\nexport const languages = GoogleTranslateLanguages;\r\n","import * as fs from 'fs';\r\nimport { error, success } from '../utils/console';\r\n\r\nexport async function readProxyFile(file_path: string) {\r\n  const confs = {\r\n    checkerRX: /^((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}:(\\d){1,}$/,\r\n  };\r\n  const data = await fs.promises.readFile(file_path, 'utf8');\r\n  if (!data) {\r\n    error('proxy file is empty!');\r\n    return;\r\n  }\r\n\r\n  let proxyList = data.split(/\\r?\\n/);\r\n\r\n  proxyList = proxyList.filter(proxy_item => confs.checkerRX.test(proxy_item));\r\n\r\n  success(`\\n---------------- Proxy Mode ----------------\\n`);\r\n  global.proxyList = proxyList;\r\n}\r\n","import { getLanguages, LanguageCodes, Sources } from '..';\r\nimport { fileTranslator, getFileFromPath } from '../core/json_file';\r\nimport {\r\n  commands,\r\n  error,\r\n  info,\r\n  language_choices,\r\n  messages,\r\n  success,\r\n  warn,\r\n} from '../utils/console';\r\nimport loading from 'loading-cli';\r\nimport { getCodeFromLanguage, translationStatistic } from '../utils/micro';\r\nimport { readProxyFile } from '../core/proxy_file';\r\nvar inquirer = require('inquirer');\r\n\r\nexport async function initializeCli() {\r\n  global.totalTranslation = 0;\r\n  global.totalTranslated = 0;\r\n  global.proxyIndex = 0;\r\n  global.proxyList = [];\r\n\r\n  const myArgs = process.argv.slice(2);\r\n  if (\r\n    myArgs.length === 0 ||\r\n    myArgs[0] === commands.help1 ||\r\n    myArgs[0] === commands.help2\r\n  ) {\r\n    help();\r\n    return;\r\n  }\r\n  translate();\r\n}\r\n\r\nexport async function help() {\r\n  success(messages.cli.welcome);\r\n  info(messages.cli.usage);\r\n}\r\n\r\nasync function translate() {\r\n  const myArgs = process.argv.slice(2);\r\n\r\n  if (myArgs[1] && typeof myArgs[1] === 'string') {\r\n    const file_path = myArgs[1];\r\n    await readProxyFile(file_path);\r\n  }\r\n\r\n  // no path condition\r\n  let objectPath = myArgs[0];\r\n  if (objectPath === undefined || objectPath === '') {\r\n    error(messages.file.no_path + ' ' + messages.cli.usage);\r\n    return;\r\n  }\r\n\r\n  // no file in the path condition\r\n  let { json_obj } = await getFileFromPath(objectPath);\r\n  if (json_obj === undefined) {\r\n    error(messages.file.no_file_in_path);\r\n    return;\r\n  }\r\n\r\n  let from!: string;\r\n  let to!: string[];\r\n\r\n  const source_choices = Object.entries(Sources).map(([key, _]) => {\r\n    return {\r\n      name: language_choices[key],\r\n      value: key,\r\n      short: key,\r\n    };\r\n  });\r\n\r\n  await inquirer\r\n    .prompt([\r\n      {\r\n        type: 'list',\r\n        name: 'source',\r\n        message: messages.cli.from_source,\r\n        pageSize: 20,\r\n        choices: [...source_choices, new inquirer.Separator()],\r\n      },\r\n    ])\r\n    .then((answers: any) => {\r\n      global.source = answers.source;\r\n    });\r\n\r\n  const { from_choices, to_choices } = getLanguageChoices();\r\n\r\n  await inquirer\r\n    .prompt([\r\n      {\r\n        type: 'list',\r\n        name: 'from',\r\n        message: messages.cli.from_message,\r\n        pageSize: 20,\r\n        choices: [...from_choices, new inquirer.Separator()],\r\n      },\r\n      {\r\n        type: 'checkbox',\r\n        name: 'to',\r\n        pageSize: 20,\r\n        message: messages.cli.to_message,\r\n        choices: to_choices,\r\n      },\r\n    ])\r\n    .then((answers: any) => {\r\n      from = answers.from;\r\n      to = answers.to;\r\n    });\r\n\r\n  if (to.length === 0 || to === undefined) {\r\n    warn(messages.cli.no_selected_language);\r\n    return;\r\n  }\r\n\r\n  const to_languages = to.map(language => (getLanguages() as any)[language]);\r\n\r\n  const load = loading({\r\n    text: `Translating. Please wait. ${translationStatistic(\r\n      global.totalTranslated,\r\n      global.totalTranslation\r\n    )}`,\r\n    color: 'yellow',\r\n    interval: 100,\r\n    stream: process.stdout,\r\n    frames: ['.', 'o', 'O', '°', 'O', 'o', '.'],\r\n  }).start();\r\n\r\n  const refreshInterval = setInterval(() => {\r\n    load.text = `Translating. Please wait. ${translationStatistic(\r\n      global.totalTranslated,\r\n      global.totalTranslation\r\n    )}`;\r\n  }, 200);\r\n\r\n  await fileTranslator(objectPath, getCodeFromLanguage(from), to_languages);\r\n\r\n  load.succeed(\r\n    `DONE! ${translationStatistic(\r\n      global.totalTranslation,\r\n      global.totalTranslation\r\n    )}`\r\n  );\r\n  clearInterval(refreshInterval);\r\n\r\n  info(messages.cli.creation_done);\r\n}\r\n\r\nfunction getLanguageChoices(): {\r\n  from_choices: LanguageCodes;\r\n  to_choices: LanguageCodes;\r\n} {\r\n  let from_choices = getFromChoices();\r\n  let to_choices = from_choices.filter(language => language !== `Automatic`);\r\n\r\n  return { from_choices, to_choices };\r\n}\r\n\r\nfunction getFromChoices(): LanguageCodes {\r\n  let languages = Object.entries(getLanguages() as any).map(([key, _]) => key);\r\n\r\n  return languages;\r\n}\r\n","import { initializeCli } from './cli/cli';\r\nimport { plaintranslate } from './core/translator';\r\nimport { fileTranslator } from './core/json_file';\r\nimport { objectTranslator } from './core/json_object';\r\n\r\nexport async function translateWord(\r\n  word: string,\r\n  from: LanguageCode,\r\n  to: LanguageCode\r\n) {\r\n  return await plaintranslate(word, from, to);\r\n}\r\n\r\nexport async function translateObject(\r\n  object: translatedObject,\r\n  from: LanguageCode,\r\n  to: LanguageCode | LanguageCodes\r\n): Promise<translatedObject | translatedObject[]> {\r\n  let hard_copy = JSON.parse(JSON.stringify(object));\r\n\r\n  return objectTranslator(hard_copy, from, to);\r\n}\r\n\r\nexport async function translateFile(\r\n  objectPath: string,\r\n  from: LanguageCode,\r\n  to: LanguageCode | LanguageCodes\r\n) {\r\n  return fileTranslator(objectPath, from, to);\r\n}\r\n\r\nexport async function runCli() {\r\n  initializeCli();\r\n}\r\n\r\nexport enum Sources {\r\n  GoogleTranslate = 'GoogleTranslate',\r\n  LibreTranslate = 'LibreTranslate',\r\n  ArgosTranslate = 'ArgosTranslate',\r\n  BingTranslate = 'BingTranslate',\r\n}\r\n\r\n// default\r\nglobal.source = Sources.GoogleTranslate;\r\n\r\n// TYPES\r\nexport interface translatedObject {\r\n  [key: string]: any;\r\n}\r\n\r\nexport type LanguageCode = string;\r\nexport type LanguageCodes = LanguageCode[];\r\n\r\nexport function getLanguages() {\r\n  if (global.source === Sources.LibreTranslate) {\r\n    return LibreTranslateLanguages;\r\n  } else if (global.source === Sources.ArgosTranslate) {\r\n    return ArgosTranslateLanguages;\r\n  } else if (global.source === Sources.BingTranslate) {\r\n    return BingTranslateLanguages;\r\n  }\r\n\r\n  return GoogleTranslateLanguages;\r\n}\r\n\r\nenum LibreTranslateLanguages {\r\n  Automatic = 'auto',\r\n  English = 'en',\r\n  Arabic = 'ar',\r\n  Azerbaijani = 'az',\r\n  Chinese = 'zh',\r\n  Czech = 'cs',\r\n  Danish = 'da',\r\n  Dutch = 'nl',\r\n  Esperanto = 'eo',\r\n  Finnish = 'fi',\r\n  French = 'fr',\r\n  German = 'de',\r\n  Greek = 'el',\r\n  Hebrew = 'iw',\r\n  Hindi = 'hi',\r\n  Hungarian = 'hu',\r\n  Indonesian = 'id',\r\n  Irish = 'ga',\r\n  Italian = 'it',\r\n  Japanese = 'ja',\r\n  Korean = 'ko',\r\n  Persian = 'fa',\r\n  Polish = 'pl',\r\n  Portuguese = 'pt',\r\n  Russian = 'ru',\r\n  Slovak = 'sk',\r\n  Spanish = 'es',\r\n  Swedish = 'sv',\r\n  Turkish = 'tr',\r\n  Ukrainian = 'uk',\r\n}\r\n\r\nenum ArgosTranslateLanguages {\r\n  Automatic = 'auto',\r\n  English = 'en',\r\n  Arabic = 'ar',\r\n  Chinese = 'zh',\r\n  French = 'fr',\r\n  German = 'de',\r\n  Hindi = 'hi',\r\n  Indonesian = 'id',\r\n  Irish = 'ga',\r\n  Italian = 'it',\r\n  Japanese = 'ja',\r\n  Korean = 'ko',\r\n  Polish = 'pl',\r\n  Portuguese = 'pt',\r\n  Russian = 'ru',\r\n  Spanish = 'es',\r\n  Turkish = 'tr',\r\n  Vietnamese = 'vi',\r\n}\r\n\r\nenum GoogleTranslateLanguages {\r\n  Automatic = 'auto',\r\n  Afrikaans = 'af',\r\n  Albanian = 'sq',\r\n  Amharic = 'am',\r\n  Arabic = 'ar',\r\n  Armenian = 'hy',\r\n  Azerbaijani = 'az',\r\n  Basque = 'eu',\r\n  Belarusian = 'be',\r\n  Bengali = 'bn',\r\n  Bosnian = 'bs',\r\n  Bulgarian = 'bg',\r\n  Catalan = 'ca',\r\n  Cebuano = 'ceb',\r\n  Chichewa = 'ny',\r\n  Chinese_Simplified = 'zh-CN',\r\n  Chinese_Traditional = 'zh-TW',\r\n  Corsican = 'co',\r\n  Croatian = 'hr',\r\n  Czech = 'cs',\r\n  Danish = 'da',\r\n  Dutch = 'nl',\r\n  English = 'en',\r\n  Esperanto = 'eo',\r\n  Estonian = 'et',\r\n  Filipino = 'tl',\r\n  Finnish = 'fi',\r\n  French = 'fr',\r\n  Frisian = 'fy',\r\n  Galician = 'gl',\r\n  Georgian = 'ka',\r\n  German = 'de',\r\n  Greek = 'el',\r\n  Gujarati = 'gu',\r\n  Haitian_Creole = 'ht',\r\n  Hausa = 'ha',\r\n  Hawaiian = 'haw',\r\n  Hebrew = 'iw',\r\n  Hindi = 'hi',\r\n  Hmong = 'hmn',\r\n  Hungarian = 'hu',\r\n  Icelandic = 'is',\r\n  Igbo = 'ig',\r\n  Indonesian = 'id',\r\n  Irish = 'ga',\r\n  Italian = 'it',\r\n  Japanese = 'ja',\r\n  Javanese = 'jw',\r\n  Kannada = 'kn',\r\n  Kazakh = 'kk',\r\n  Khmer = 'km',\r\n  Korean = 'ko',\r\n  Kurdish_Kurmanji = 'ku',\r\n  Kyrgyz = 'ky',\r\n  Lao = 'lo',\r\n  Latin = 'la',\r\n  Latvian = 'lv',\r\n  Lithuanian = 'lt',\r\n  Luxembourgish = 'lb',\r\n  Macedonian = 'mk',\r\n  Malagasy = 'mg',\r\n  Malay = 'ms',\r\n  Malayalam = 'ml',\r\n  Maltese = 'mt',\r\n  Maori = 'mi',\r\n  Marathi = 'mr',\r\n  Mongolian = 'mn',\r\n  Myanmar_Burmese = 'my',\r\n  Nepali = 'ne',\r\n  Norwegian = 'no',\r\n  Pashto = 'ps',\r\n  Persian = 'fa',\r\n  Polish = 'pl',\r\n  Portuguese = 'pt',\r\n  Punjabi = 'pa',\r\n  Romanian = 'ro',\r\n  Russian = 'ru',\r\n  Samoan = 'sm',\r\n  Scots_Gaelic = 'gd',\r\n  Serbian = 'sr',\r\n  Sesotho = 'st',\r\n  Shona = 'sn',\r\n  Sindhi = 'sd',\r\n  Sinhala = 'si',\r\n  Slovak = 'sk',\r\n  Slovenian = 'sl',\r\n  Somali = 'so',\r\n  Spanish = 'es',\r\n  Sundanese = 'su',\r\n  Swahili = 'sw',\r\n  Swedish = 'sv',\r\n  Tajik = 'tg',\r\n  Tamil = 'ta',\r\n  Telugu = 'te',\r\n  Thai = 'th',\r\n  Turkish = 'tr',\r\n  Ukrainian = 'uk',\r\n  Urdu = 'ur',\r\n  Uzbek = 'uz',\r\n  Vietnamese = 'vi',\r\n  Welsh = 'cy',\r\n  Xhosa = 'xh',\r\n  Yiddish = 'yi',\r\n  Yoruba = 'yo',\r\n  Zulu = 'zu',\r\n}\r\n\r\nenum BingTranslateLanguages {\r\n  Automatic = 'auto-detect',\r\n  Afrikaans = 'af',\r\n  Albanian = 'sq',\r\n  Amharic = 'am',\r\n  Arabic = 'ar',\r\n  Armenian = 'hy',\r\n  Assamese = 'as',\r\n  Azerbaijani = 'az',\r\n  Bangla = 'bn',\r\n  Bashkir = 'ba',\r\n  Basque = 'eu',\r\n  Bosnian = 'bs',\r\n  Bulgarian = 'bg',\r\n  Cantonese_Traditional = 'yue',\r\n  Catalan = 'ca',\r\n  Chinese_Literary = 'lzh',\r\n  Chinese_Simplified = 'zh-Hans',\r\n  Chinese_Traditional = 'zh-Hant',\r\n  Croatian = 'hr',\r\n  Czech = 'cs',\r\n  Danish = 'da',\r\n  Dari = 'prs',\r\n  Divehi = 'dv',\r\n  Dutch = 'nl',\r\n  English = 'en',\r\n  Estonian = 'et',\r\n  Faroese = 'fo',\r\n  Fijian = 'fj',\r\n  Filipino = 'fil',\r\n  Finnish = 'fi',\r\n  French = 'fr',\r\n  French_Canada = 'fr-CA',\r\n  Galician = 'gl',\r\n  Georgian = 'ka',\r\n  German = 'de',\r\n  Greek = 'el',\r\n  Gujarati = 'gu',\r\n  Haitian_Creole = 'ht',\r\n  Hebrew = 'he',\r\n  Hindi = 'hi',\r\n  Hmong_Daw = 'mww',\r\n  Hungarian = 'hu',\r\n  Icelandic = 'is',\r\n  Indonesian = 'id',\r\n  Inuinnaqtun = 'ikt',\r\n  Inuktitut = 'iu',\r\n  Inuktitut_Latin = 'iu-Latn',\r\n  Irish = 'ga',\r\n  Italian = 'it',\r\n  Japanese = 'ja',\r\n  Kannada = 'kn',\r\n  Kazakh = 'kk',\r\n  Khmer = 'km',\r\n  Klingon_Latin = 'tlh-Latn',\r\n  Korean = 'ko',\r\n  Kurdish_Central = 'ku',\r\n  Kurdish_Northern = 'kmr',\r\n  Kyrgyz = 'ky',\r\n  Lao = 'lo',\r\n  Latvian = 'lv',\r\n  Lithuanian = 'lt',\r\n  Macedonian = 'mk',\r\n  Malagasy = 'mg',\r\n  Malay = 'ms',\r\n  Malayalam = 'ml',\r\n  Maltese = 'mt',\r\n  Marathi = 'mr',\r\n  Mongolian_Cyrillic = 'mn-Cyrl',\r\n  Mongolian_Traditional = 'mn-Mong',\r\n  Myanmar_Burmese = 'my',\r\n  Māori = 'mi',\r\n  Nepali = 'ne',\r\n  Norwegian = 'nb',\r\n  Odia = 'or',\r\n  Pashto = 'ps',\r\n  Persian = 'fa',\r\n  Polish = 'pl',\r\n  Portuguese_Brazil = 'pt',\r\n  Portuguese_Portugal = 'pt-PT',\r\n  Punjabi = 'pa',\r\n  Querétaro_Otomi = 'otq',\r\n  Romanian = 'ro',\r\n  Russian = 'ru',\r\n  Samoan = 'sm',\r\n  Serbian_Cyrillic = 'sr-Cyrl',\r\n  Serbian_Latin = 'sr-Latn',\r\n  Slovak = 'sk',\r\n  Slovenian = 'sl',\r\n  Somali = 'so',\r\n  Spanish = 'es',\r\n  Swahili = 'sw',\r\n  Swedish = 'sv',\r\n  Tahitian = 'ty',\r\n  Tamil = 'ta',\r\n  Tatar = 'tt',\r\n  Telugu = 'te',\r\n  Thai = 'th',\r\n  Tibetan = 'bo',\r\n  Tigrinya = 'ti',\r\n  Tongan = 'to',\r\n  Turkish = 'tr',\r\n  Turkmen = 'tk',\r\n  Ukrainian = 'uk',\r\n  Upper_Sorbian = 'hsb',\r\n  Urdu = 'ur',\r\n  Uyghur = 'ug',\r\n  Uzbek_Latin = 'uz',\r\n  Vietnamese = 'vi',\r\n  Welsh = 'cy',\r\n  Yucatec_Maya = 'yua',\r\n  Zulu = 'zu',\r\n}\r\n\r\nexport const languages = GoogleTranslateLanguages;\r\n"],"names":["getLanguageFromCode","language_code","getEnumKeyByEnumValue","getLanguages","getCodeFromLanguage","language","languages","myEnum","enumValue","keys","Object","filter","x","length","translationStatistic","totalTranslated","totalTranslation","current_version","packageJSON","default_value","translation_value_limit","cli_name","success_color","error_color","info_color","warn_color","success","message","console","log","error","info","warn","commands","help1","help2","language_choices","GoogleTranslate","BingTranslate","LibreTranslate","ArgosTranslate","messages","cli","welcome","usage","from_source","from_message","to_message","no_selected_language","creation_done","object","file","no_path","no_file_in_path","cannot_translate","cannot_save_file","map","str","urlEncoder","mapByDoubleBracket","double_brackets_map","initial_ignored_word","word","mapBySingleBracket","single_brackets_map","ignored_word","unMap","unmapBySingleBracket","unmapByDoubleBracket","urlDecoder","mapIgnoredValues","unmapIgnoredValues","start","end","replaced_start","replaced_end","counter","regex","RegExp","new_str","replace","substring","key","locked_ignored","entries","value","for_replace","text","new_text","url","getFile","objectPath","json_file","undefined","fs","then","data","_","getRootFolder","path","arr","split","pop","root","join","saveFilePublic","json","JSON","stringify","safeValueTransition","value_safety","valueIsSafe","is_safe","type","nonSafeTypes","empty","result","plaintranslate","from","to","ignorer","ignored_str","translateSourceFunction","global","source","translatedStr","Sources","translateWithLibre","translateWithArgos","translateWithBing","translateWithGoogle","body","q","target","format","api_key","secret","axios","post","headers","Origin","translatedText","Referer","bingTranslator","translation","proxyList","proxyIndex","proxy","agent","createHttpProxyAgent","translateWithGoogleByProxySupport","timeout","options","translate","MAX_SIMULTANEOUS_REQUEST","queue","TaskQueue","bluebirdPromise","objectTranslator","general_object","Promise","all","index","index_as_num","Number","copy_object","parse","deepDiver","Error","has","prototype","hasOwnProperty","bind","k","add","err","fileTranslator","getFileFromPath","file_from_path","json_obj","new_json_obj","latest_path","root_folder","Array","isArray","forEach","element","current_json_obj","file_name","__dirname","LibreTranslateLanguages","ArgosTranslateLanguages","BingTranslateLanguages","GoogleTranslateLanguages","readProxyFile","file_path","confs","checkerRX","readFile","proxy_item","test","inquirer","require","initializeCli","myArgs","process","argv","slice","help","source_choices","name","prompt","pageSize","choices","Separator","answers","getLanguageChoices","from_choices","to_choices","to_languages","load","loading","color","interval","stream","stdout","frames","refreshInterval","setInterval","succeed","clearInterval","getFromChoices","translateWord","translateObject","hard_copy","translateFile","runCli"],"mappings":"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"}