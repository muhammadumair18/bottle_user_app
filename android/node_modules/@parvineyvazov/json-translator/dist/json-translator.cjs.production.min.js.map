{"version":3,"file":"json-translator.cjs.production.min.js","sources":["../src/utils/micro.ts","../src/utils/console.ts","../src/core/core.ts","../src/core/ignorer.ts","../src/core/translator.ts","../src/core/json_object.ts","../src/index.ts","../src/core/json_file.ts","../src/core/proxy_file.ts","../src/cli/cli.ts","../src/index.ts"],"sourcesContent":["import { getLanguages } from '..';\r\nimport * as packageJSON from '../../package.json';\r\n\r\nexport function getLanguageFromCode(language_code: string) {\r\n  return getEnumKeyByEnumValue(getLanguages(), language_code);\r\n}\r\n\r\nexport function getCodeFromLanguage(language: string) {\r\n  let languages = getLanguages();\r\n  return (languages as any)[language as keyof typeof languages];\r\n}\r\n\r\nfunction getEnumKeyByEnumValue(\r\n  myEnum: any,\r\n  enumValue: number | string\r\n): string {\r\n  let keys = Object.keys(myEnum).filter(x => myEnum[x] === enumValue);\r\n  return keys.length > 0 ? keys[0] : '';\r\n}\r\n\r\nexport function translationStatistic(\r\n  totalTranslated: number,\r\n  totalTranslation: number\r\n): string {\r\n  return `${totalTranslated} of ${totalTranslation} translated.`;\r\n}\r\n\r\nexport const current_version = packageJSON.version;\r\nexport const default_value = '--';\r\nexport const translation_value_limit = 5000;\r\n","import { current_version } from './micro';\r\n\r\nconst cli_name = 'jsontt';\r\n\r\nconst success_color = '\\x1b[32m';\r\nconst error_color = '\\x1b[31m';\r\nconst info_color = '\\x1b[34m';\r\nconst warn_color = '\\x1b[33m';\r\n\r\nexport function success(message: string) {\r\n  console.log(success_color, `${message}`, '\\x1b[0m');\r\n}\r\n\r\nexport function error(message: string) {\r\n  console.log(error_color, `${message}`, '\\x1b[0m');\r\n}\r\n\r\nexport function info(message: string) {\r\n  console.log(info_color, `${message}`, '\\x1b[0m');\r\n}\r\n\r\nexport function warn(message: string) {\r\n  console.log(warn_color, `${message}`, '\\x1b[0m');\r\n}\r\n\r\nexport const commands = {\r\n  help1: '--help',\r\n  help2: '-h',\r\n};\r\n\r\nexport const language_choices: { [key: string]: string } = {\r\n  GoogleTranslate: `Google Translate (104 languages)`,\r\n  BingTranslate:\r\n    'Bing Microsoft Translate (110 languages) \\x1b[33m**NEW**\\x1b[0m',\r\n  LibreTranslate: `Libre Translate (29 languages)`,\r\n  ArgosTranslate: `Argos Translate (17 languages)`,\r\n};\r\n\r\nexport const messages = {\r\n  cli: {\r\n    welcome: `Welcome to the JSON translator. v${current_version}`,\r\n    usage: `Usage: \\n\\n\\t${cli_name} <path/file.json> \\n\\t${cli_name} <path/file.json> <path/proxy_list.txt> \\n\\t${cli_name} ${commands.help1} \\n\\t${cli_name} ${commands.help2}`,\r\n    from_source: 'From which source?',\r\n    from_message: 'From which language?',\r\n    to_message:\r\n      'To which language | languages? (Can select more than one with space bar)',\r\n    no_selected_language:\r\n      'You didn`t select any language. Please try it again and select languages with the space bar.',\r\n    creation_done:\r\n      'All files are created! You can find them in the same folder as the original JSON file.',\r\n  },\r\n  object: {},\r\n  file: {\r\n    no_path: `The path is not provided.`,\r\n    no_file_in_path: `Could not find the file in the path.`,\r\n    cannot_translate: `Could not translate the file.`,\r\n    cannot_save_file: `Could not save the file.`,\r\n  },\r\n};\r\n","import * as fs from 'fs/promises';\r\nimport { error, messages } from '../utils/console';\r\nimport { default_value, translation_value_limit } from '../utils/micro';\r\n\r\nexport async function getFile(objectPath: string) {\r\n  let json_file: any = undefined;\r\n\r\n  await fs\r\n    .readFile(objectPath, 'utf8')\r\n    .then(data => {\r\n      json_file = data;\r\n    })\r\n    .catch(_ => {\r\n      json_file = undefined;\r\n    });\r\n\r\n  return json_file;\r\n}\r\n\r\nexport function getRootFolder(path: string) {\r\n  let arr = path.split('/');\r\n  arr.pop();\r\n\r\n  let root = arr.join('/');\r\n\r\n  if (root === undefined || root === '') {\r\n    root = './';\r\n  }\r\n\r\n  return root;\r\n}\r\n\r\nexport async function saveFilePublic(path: string, data: any) {\r\n  var json = JSON.stringify(data);\r\n\r\n  await fs\r\n    .writeFile(path, json, 'utf8')\r\n    .then(_ => {})\r\n    .catch(_ => {\r\n      error(messages.file.cannot_save_file);\r\n    });\r\n}\r\n\r\nexport function safeValueTransition(value: string) {\r\n  const value_safety: ValueSafety = valueIsSafe(value);\r\n\r\n  if (value_safety.is_safe === true) {\r\n    return value;\r\n  }\r\n\r\n  switch (value_safety.type) {\r\n    case nonSafeTypes.null:\r\n    case nonSafeTypes.undefined:\r\n    case nonSafeTypes.empty:\r\n      value = default_value;\r\n      break;\r\n    case nonSafeTypes.long:\r\n      value = value.substring(0, translation_value_limit);\r\n      break;\r\n  }\r\n\r\n  return value;\r\n}\r\n\r\nfunction valueIsSafe(value: string): ValueSafety {\r\n  let result: ValueSafety = {\r\n    is_safe: true,\r\n    type: undefined,\r\n  };\r\n\r\n  if (value === undefined) {\r\n    result.is_safe = false;\r\n    result['type'] = nonSafeTypes.undefined;\r\n\r\n    return result;\r\n  }\r\n\r\n  if (value === null) {\r\n    result.is_safe = false;\r\n    result['type'] = nonSafeTypes.null;\r\n\r\n    return result;\r\n  }\r\n\r\n  if (value.length >= translation_value_limit) {\r\n    result.is_safe = false;\r\n    result['type'] = nonSafeTypes.long;\r\n\r\n    return result;\r\n  }\r\n\r\n  if (value === '') {\r\n    result.is_safe = false;\r\n    result['type'] = nonSafeTypes.empty;\r\n\r\n    return result;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\ninterface ValueSafety {\r\n  is_safe: boolean;\r\n  type: nonSafeTypes | undefined;\r\n}\r\n\r\nenum nonSafeTypes {\r\n  'long',\r\n  'undefined',\r\n  'null',\r\n  'empty',\r\n}\r\n","export function map(\r\n  str: string\r\n): {\r\n  word: string;\r\n  double_brackets_map: { [key: string]: string };\r\n  single_brackets_map: { [key: string]: string };\r\n} {\r\n  // encode urls if exists in the str\r\n  str = urlEncoder(str);\r\n\r\n  let {\r\n    map: double_brackets_map,\r\n    word: initial_ignored_word,\r\n  } = mapByDoubleBracket(str);\r\n  let { map: single_brackets_map, word: ignored_word } = mapBySingleBracket(\r\n    initial_ignored_word\r\n  );\r\n\r\n  return {\r\n    word: ignored_word,\r\n    double_brackets_map,\r\n    single_brackets_map: single_brackets_map,\r\n  };\r\n}\r\n\r\nexport function unMap(\r\n  str: string,\r\n  double_brackets_map: object,\r\n  single_brackets_map: object\r\n): string {\r\n  let word = unmapBySingleBracket(str, single_brackets_map);\r\n  word = unmapByDoubleBracket(word, double_brackets_map);\r\n\r\n  // decode urls if exists in the str\r\n  word = urlDecoder(word);\r\n\r\n  return word;\r\n}\r\n\r\nfunction mapBySingleBracket(\r\n  str: string\r\n): { word: string; map: { [key: string]: string } } {\r\n  return mapIgnoredValues(str, '{', '}', '{', '}');\r\n}\r\n\r\nfunction unmapBySingleBracket(str: string, map: object): string {\r\n  return unmapIgnoredValues(str, map, '{', '}', '{', '}');\r\n}\r\n\r\nfunction mapByDoubleBracket(\r\n  str: string\r\n): { word: string; map: { [key: string]: string } } {\r\n  return mapIgnoredValues(str, '{{', '}}', '{', '}');\r\n}\r\n\r\nfunction unmapByDoubleBracket(str: string, map: object): string {\r\n  return unmapIgnoredValues(str, map, '{{', '}}', '{', '}');\r\n}\r\n\r\nfunction mapIgnoredValues(\r\n  str: string,\r\n  start: string,\r\n  end: string,\r\n  replaced_start: string,\r\n  replaced_end: string\r\n): { word: string; map: { [key: string]: string } } {\r\n  let counter = 0;\r\n  let map: { [key: string]: string } = {};\r\n\r\n  let regex = new RegExp(`${start}(.*?)${end}`, 'g');\r\n\r\n  let new_str = str.replace(regex, function(word) {\r\n    word = word.substring(start.length, word.length - end.length);\r\n\r\n    // const key = \"*\".repeat(counter)\r\n    const key = counter;\r\n\r\n    map[`${key}`] = word;\r\n\r\n    let locked_ignored = replaced_start + key + replaced_end;\r\n\r\n    counter++;\r\n    return locked_ignored;\r\n  });\r\n\r\n  return { word: new_str, map: map };\r\n}\r\n\r\nfunction unmapIgnoredValues(\r\n  str: string,\r\n  map: object,\r\n  start: string,\r\n  end: string,\r\n  replaced_start: string,\r\n  replaced_end: string\r\n): string {\r\n  for (const [key, value] of Object.entries(map)) {\r\n    let for_replace = replaced_start + key + replaced_end;\r\n\r\n    str = str.replace(for_replace, start + value + end);\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n// URL detector & encode AND decoder\r\nfunction urlEncoder(text: string): string {\r\n  // url finder regex => url\r\n  const regex = /(?:(?:https?|ftp|file):\\/\\/|www\\.|ftp\\.)(?:\\([-A-Z0-9+&@#\\/%=~_|$?!;:,.]*\\)|[-A-Z0-9+&@#\\/%=~_|$?!;:,.])*(?:\\([-A-Z0-9+&@#\\/%=~_|$?!;:,.]*\\)|[A-Z0-9+&@#\\/%=~_|$])/gim;\r\n\r\n  let new_text = text.replace(regex, function(url) {\r\n    url = `{` + url + `}`;\r\n    return url;\r\n  });\r\n\r\n  return new_text;\r\n}\r\n\r\nfunction urlDecoder(text: string): string {\r\n  // url finder regex => {url}\r\n  const regex = /{(?:(?:https?|ftp|file):\\/\\/|www\\.|ftp\\.)(?:\\([-A-Z0-9+&@#\\/%=~_|$?!;:,.]*\\)|[-A-Z0-9+&@#\\/%=~_|$?!;:,.])*(?:\\([-A-Z0-9+&@#\\/%=~_|$?!;:,.]*\\)|[A-Z0-9+&@#\\/%=~_|$])}/gim;\r\n\r\n  let new_text = text.replace(regex, function(url) {\r\n    url = url.substring(1, url.length - 1);\r\n    return url;\r\n  });\r\n\r\n  return new_text;\r\n}\r\n","import translate from '@vitalets/google-translate-api';\r\nimport * as bingTranslator from 'bing-translate-api';\r\nimport createHttpProxyAgent from 'http-proxy-agent';\r\nimport { LanguageCode, Sources } from '..';\r\nimport { warn } from '../utils/console';\r\nimport { default_value } from '../utils/micro';\r\nimport axios from 'axios';\r\nimport * as ignorer from './ignorer';\r\nimport { safeValueTransition } from './core';\r\n\r\nexport async function plaintranslate(\r\n  str: string,\r\n  from: LanguageCode,\r\n  to: LanguageCode\r\n): Promise<string> {\r\n  // STEP: map the subset of string need to be ignored\r\n  let {\r\n    word: ignored_str,\r\n    double_brackets_map,\r\n    single_brackets_map,\r\n  } = ignorer.map(str);\r\n\r\n  // STEP: translate in try-catch to keep continuity\r\n  try {\r\n    // STEP: translate with proper source\r\n    let translatedStr = await translateSourceFunction(global.source)(\r\n      ignored_str,\r\n      from,\r\n      to\r\n    );\r\n\r\n    // STEP: put ignored values back\r\n    translatedStr = ignorer.unMap(\r\n      translatedStr,\r\n      double_brackets_map,\r\n      single_brackets_map\r\n    );\r\n\r\n    global.totalTranslated = global.totalTranslated + 1;\r\n\r\n    return translatedStr;\r\n  } catch (e) {\r\n    // error case -> return\r\n    warn(\r\n      `\\nerror while translating \\n\\t\"${str}\" \\nassigned \"--\" instead of exit from cli.`\r\n    );\r\n\r\n    global.totalTranslated = global.totalTranslated + 1;\r\n\r\n    return default_value;\r\n  }\r\n}\r\n\r\nfunction translateSourceFunction(source: string) {\r\n  switch (source) {\r\n    case Sources.LibreTranslate:\r\n      return translateWithLibre;\r\n    case Sources.ArgosTranslate:\r\n      return translateWithArgos;\r\n    case Sources.BingTranslate:\r\n      return translateWithBing;\r\n    default:\r\n      return translateWithGoogle;\r\n  }\r\n}\r\n\r\nasync function translateWithLibre(\r\n  str: string,\r\n  from: LanguageCode,\r\n  to: LanguageCode\r\n): Promise<string> {\r\n  let body = {\r\n    q: safeValueTransition(str),\r\n    source: from,\r\n    target: to,\r\n    format: 'text',\r\n    api_key: '',\r\n    secret: '2NEKGMB',\r\n  };\r\n\r\n  const { data } = await axios.post(\r\n    'https://libretranslate.com/translate',\r\n    body,\r\n    {\r\n      headers: {\r\n        Origin: 'https://libretranslate.com',\r\n      },\r\n    }\r\n  );\r\n\r\n  return data?.translatedText ? data?.translatedText : default_value;\r\n}\r\n\r\nasync function translateWithArgos(\r\n  str: string,\r\n  from: LanguageCode,\r\n  to: LanguageCode\r\n): Promise<string> {\r\n  let body = {\r\n    q: safeValueTransition(str),\r\n    source: from,\r\n    target: to,\r\n  };\r\n\r\n  const { data } = await axios.post(\r\n    'https://translate.argosopentech.com/translate',\r\n    body,\r\n    {\r\n      headers: {\r\n        Origin: 'https://translate.argosopentech.com',\r\n        Referer: 'https://translate.argosopentech.com',\r\n      },\r\n    }\r\n  );\r\n\r\n  return data?.translatedText ? data?.translatedText : default_value;\r\n}\r\n\r\nasync function translateWithBing(\r\n  str: string,\r\n  from: LanguageCode,\r\n  to: LanguageCode\r\n): Promise<string> {\r\n  const { translation } = await bingTranslator.translate(\r\n    safeValueTransition(str),\r\n    from,\r\n    to,\r\n    false\r\n  );\r\n\r\n  return translation;\r\n}\r\n\r\nasync function translateWithGoogle(\r\n  str: string,\r\n  from: LanguageCode,\r\n  to: LanguageCode\r\n): Promise<string> {\r\n  // STEP: if proxy list provided\r\n  if (\r\n    global.proxyList &&\r\n    global.proxyList.length > 0 &&\r\n    global.proxyIndex !== -1\r\n  ) {\r\n    let proxy = global.proxyList[global.proxyIndex];\r\n\r\n    // STEP: new proxy exist\r\n    if (proxy) {\r\n      let agent = createHttpProxyAgent(`http://${proxy}`);\r\n\r\n      let translatedStr = await translateWithGoogleByProxySupport(\r\n        str,\r\n        from,\r\n        to,\r\n        {\r\n          agent,\r\n          timeout: 4000,\r\n        }\r\n      );\r\n\r\n      return translatedStr;\r\n    } else {\r\n      warn('No new proxy exists, continuing without proxy');\r\n      global.proxyIndex = -1;\r\n\r\n      let translatedStr = await translateWithGoogleByProxySupport(\r\n        str,\r\n        from,\r\n        to\r\n      );\r\n\r\n      return translatedStr;\r\n    }\r\n  } else {\r\n    // STEP: translate without proxy\r\n    let translatedStr = await translateWithGoogleByProxySupport(str, from, to);\r\n\r\n    return translatedStr;\r\n  }\r\n}\r\n\r\nasync function translateWithGoogleByProxySupport(\r\n  str: string,\r\n  from: LanguageCode,\r\n  to: LanguageCode,\r\n  options?: { agent: any; timeout: number }\r\n) {\r\n  const { text } = await translate(\r\n    safeValueTransition(str),\r\n    {\r\n      from: from,\r\n      to: to,\r\n    },\r\n    {\r\n      agent: options !== undefined ? options.agent : undefined,\r\n    }\r\n  );\r\n\r\n  return text;\r\n}\r\n","import { LanguageCode, LanguageCodes, translatedObject } from '..';\r\nimport { plaintranslate } from './translator';\r\nimport { TaskQueue } from 'cwait';\r\nimport { Promise as bluebirdPromise } from 'bluebird';\r\nconst MAX_SIMULTANEOUS_REQUEST = 3;\r\n\r\nvar queue = new TaskQueue(bluebirdPromise, MAX_SIMULTANEOUS_REQUEST);\r\n\r\nexport async function objectTranslator(\r\n  object: translatedObject,\r\n  from: LanguageCode,\r\n  to: LanguageCode | LanguageCodes\r\n): Promise<translatedObject | translatedObject[]> {\r\n  if (object && from && to) {\r\n    // need to translate to more than 1 languages\r\n    if (typeof to === 'object') {\r\n      let general_object: translatedObject[] | null[] = [];\r\n\r\n      await Promise.all(\r\n        Object.keys(to as LanguageCodes).map(async function(index) {\r\n          const index_as_num = Number(index);\r\n          const copy_object = JSON.parse(JSON.stringify(object));\r\n\r\n          general_object[index_as_num] = await deepDiver(\r\n            copy_object,\r\n            from,\r\n            to[index_as_num]\r\n          );\r\n        })\r\n      );\r\n\r\n      return general_object as translatedObject[];\r\n    } else {\r\n      await deepDiver(object, from, to);\r\n\r\n      return object as translatedObject;\r\n    }\r\n  } else {\r\n    throw new Error(\r\n      `Undefined values detected. Available ones: object: ${!!object}, from: ${!!from}, to: ${!!to}`\r\n    );\r\n  }\r\n}\r\n\r\nexport async function deepDiver(\r\n  object: translatedObject,\r\n  from: LanguageCode,\r\n  to: LanguageCode\r\n): Promise<translatedObject | null> {\r\n  var has = Object.prototype.hasOwnProperty.bind(object);\r\n\r\n  if (object === null) {\r\n    return null;\r\n  }\r\n\r\n  await Promise.all(\r\n    Object.keys(object).map(async function(k) {\r\n      if (has(k)) {\r\n        switch (typeof object[k]) {\r\n          case 'object':\r\n            await deepDiver(object[k], from, to);\r\n            break;\r\n          case 'string':\r\n            global.totalTranslation = global.totalTranslation + 1;\r\n\r\n            return queue.add(async () => {\r\n              return await plaintranslate(object[k], from, to)\r\n                .then(data => {\r\n                  object[k] = data;\r\n                })\r\n                .catch(err => {\r\n                  // TODO: return error\r\n                  console.log('Translation error:', err);\r\n                });\r\n            });\r\n        }\r\n      }\r\n    })\r\n  );\r\n\r\n  return object;\r\n}\r\n","import { initializeCli } from './cli/cli';\r\nimport { plaintranslate } from './core/translator';\r\nimport { fileTranslator } from './core/json_file';\r\nimport { objectTranslator } from './core/json_object';\r\n\r\nexport async function translateWord(\r\n  word: string,\r\n  from: LanguageCode,\r\n  to: LanguageCode\r\n) {\r\n  return await plaintranslate(word, from, to);\r\n}\r\n\r\nexport async function translateObject(\r\n  object: translatedObject,\r\n  from: LanguageCode,\r\n  to: LanguageCode | LanguageCodes\r\n): Promise<translatedObject | translatedObject[]> {\r\n  let hard_copy = JSON.parse(JSON.stringify(object));\r\n\r\n  return objectTranslator(hard_copy, from, to);\r\n}\r\n\r\nexport async function translateFile(\r\n  objectPath: string,\r\n  from: LanguageCode,\r\n  to: LanguageCode | LanguageCodes\r\n) {\r\n  return fileTranslator(objectPath, from, to);\r\n}\r\n\r\nexport async function runCli() {\r\n  initializeCli();\r\n}\r\n\r\nexport enum Sources {\r\n  GoogleTranslate = 'GoogleTranslate',\r\n  LibreTranslate = 'LibreTranslate',\r\n  ArgosTranslate = 'ArgosTranslate',\r\n  BingTranslate = 'BingTranslate',\r\n}\r\n\r\n// default\r\nglobal.source = Sources.GoogleTranslate;\r\n\r\n// TYPES\r\nexport interface translatedObject {\r\n  [key: string]: any;\r\n}\r\n\r\nexport type LanguageCode = string;\r\nexport type LanguageCodes = LanguageCode[];\r\n\r\nexport function getLanguages() {\r\n  if (global.source === Sources.LibreTranslate) {\r\n    return LibreTranslateLanguages;\r\n  } else if (global.source === Sources.ArgosTranslate) {\r\n    return ArgosTranslateLanguages;\r\n  } else if (global.source === Sources.BingTranslate) {\r\n    return BingTranslateLanguages;\r\n  }\r\n\r\n  return GoogleTranslateLanguages;\r\n}\r\n\r\nenum LibreTranslateLanguages {\r\n  Automatic = 'auto',\r\n  English = 'en',\r\n  Arabic = 'ar',\r\n  Azerbaijani = 'az',\r\n  Chinese = 'zh',\r\n  Czech = 'cs',\r\n  Danish = 'da',\r\n  Dutch = 'nl',\r\n  Esperanto = 'eo',\r\n  Finnish = 'fi',\r\n  French = 'fr',\r\n  German = 'de',\r\n  Greek = 'el',\r\n  Hebrew = 'iw',\r\n  Hindi = 'hi',\r\n  Hungarian = 'hu',\r\n  Indonesian = 'id',\r\n  Irish = 'ga',\r\n  Italian = 'it',\r\n  Japanese = 'ja',\r\n  Korean = 'ko',\r\n  Persian = 'fa',\r\n  Polish = 'pl',\r\n  Portuguese = 'pt',\r\n  Russian = 'ru',\r\n  Slovak = 'sk',\r\n  Spanish = 'es',\r\n  Swedish = 'sv',\r\n  Turkish = 'tr',\r\n  Ukrainian = 'uk',\r\n}\r\n\r\nenum ArgosTranslateLanguages {\r\n  Automatic = 'auto',\r\n  English = 'en',\r\n  Arabic = 'ar',\r\n  Chinese = 'zh',\r\n  French = 'fr',\r\n  German = 'de',\r\n  Hindi = 'hi',\r\n  Indonesian = 'id',\r\n  Irish = 'ga',\r\n  Italian = 'it',\r\n  Japanese = 'ja',\r\n  Korean = 'ko',\r\n  Polish = 'pl',\r\n  Portuguese = 'pt',\r\n  Russian = 'ru',\r\n  Spanish = 'es',\r\n  Turkish = 'tr',\r\n  Vietnamese = 'vi',\r\n}\r\n\r\nenum GoogleTranslateLanguages {\r\n  Automatic = 'auto',\r\n  Afrikaans = 'af',\r\n  Albanian = 'sq',\r\n  Amharic = 'am',\r\n  Arabic = 'ar',\r\n  Armenian = 'hy',\r\n  Azerbaijani = 'az',\r\n  Basque = 'eu',\r\n  Belarusian = 'be',\r\n  Bengali = 'bn',\r\n  Bosnian = 'bs',\r\n  Bulgarian = 'bg',\r\n  Catalan = 'ca',\r\n  Cebuano = 'ceb',\r\n  Chichewa = 'ny',\r\n  Chinese_Simplified = 'zh-CN',\r\n  Chinese_Traditional = 'zh-TW',\r\n  Corsican = 'co',\r\n  Croatian = 'hr',\r\n  Czech = 'cs',\r\n  Danish = 'da',\r\n  Dutch = 'nl',\r\n  English = 'en',\r\n  Esperanto = 'eo',\r\n  Estonian = 'et',\r\n  Filipino = 'tl',\r\n  Finnish = 'fi',\r\n  French = 'fr',\r\n  Frisian = 'fy',\r\n  Galician = 'gl',\r\n  Georgian = 'ka',\r\n  German = 'de',\r\n  Greek = 'el',\r\n  Gujarati = 'gu',\r\n  Haitian_Creole = 'ht',\r\n  Hausa = 'ha',\r\n  Hawaiian = 'haw',\r\n  Hebrew = 'iw',\r\n  Hindi = 'hi',\r\n  Hmong = 'hmn',\r\n  Hungarian = 'hu',\r\n  Icelandic = 'is',\r\n  Igbo = 'ig',\r\n  Indonesian = 'id',\r\n  Irish = 'ga',\r\n  Italian = 'it',\r\n  Japanese = 'ja',\r\n  Javanese = 'jw',\r\n  Kannada = 'kn',\r\n  Kazakh = 'kk',\r\n  Khmer = 'km',\r\n  Korean = 'ko',\r\n  Kurdish_Kurmanji = 'ku',\r\n  Kyrgyz = 'ky',\r\n  Lao = 'lo',\r\n  Latin = 'la',\r\n  Latvian = 'lv',\r\n  Lithuanian = 'lt',\r\n  Luxembourgish = 'lb',\r\n  Macedonian = 'mk',\r\n  Malagasy = 'mg',\r\n  Malay = 'ms',\r\n  Malayalam = 'ml',\r\n  Maltese = 'mt',\r\n  Maori = 'mi',\r\n  Marathi = 'mr',\r\n  Mongolian = 'mn',\r\n  Myanmar_Burmese = 'my',\r\n  Nepali = 'ne',\r\n  Norwegian = 'no',\r\n  Pashto = 'ps',\r\n  Persian = 'fa',\r\n  Polish = 'pl',\r\n  Portuguese = 'pt',\r\n  Punjabi = 'pa',\r\n  Romanian = 'ro',\r\n  Russian = 'ru',\r\n  Samoan = 'sm',\r\n  Scots_Gaelic = 'gd',\r\n  Serbian = 'sr',\r\n  Sesotho = 'st',\r\n  Shona = 'sn',\r\n  Sindhi = 'sd',\r\n  Sinhala = 'si',\r\n  Slovak = 'sk',\r\n  Slovenian = 'sl',\r\n  Somali = 'so',\r\n  Spanish = 'es',\r\n  Sundanese = 'su',\r\n  Swahili = 'sw',\r\n  Swedish = 'sv',\r\n  Tajik = 'tg',\r\n  Tamil = 'ta',\r\n  Telugu = 'te',\r\n  Thai = 'th',\r\n  Turkish = 'tr',\r\n  Ukrainian = 'uk',\r\n  Urdu = 'ur',\r\n  Uzbek = 'uz',\r\n  Vietnamese = 'vi',\r\n  Welsh = 'cy',\r\n  Xhosa = 'xh',\r\n  Yiddish = 'yi',\r\n  Yoruba = 'yo',\r\n  Zulu = 'zu',\r\n}\r\n\r\nenum BingTranslateLanguages {\r\n  Automatic = 'auto-detect',\r\n  Afrikaans = 'af',\r\n  Albanian = 'sq',\r\n  Amharic = 'am',\r\n  Arabic = 'ar',\r\n  Armenian = 'hy',\r\n  Assamese = 'as',\r\n  Azerbaijani = 'az',\r\n  Bangla = 'bn',\r\n  Bashkir = 'ba',\r\n  Basque = 'eu',\r\n  Bosnian = 'bs',\r\n  Bulgarian = 'bg',\r\n  Cantonese_Traditional = 'yue',\r\n  Catalan = 'ca',\r\n  Chinese_Literary = 'lzh',\r\n  Chinese_Simplified = 'zh-Hans',\r\n  Chinese_Traditional = 'zh-Hant',\r\n  Croatian = 'hr',\r\n  Czech = 'cs',\r\n  Danish = 'da',\r\n  Dari = 'prs',\r\n  Divehi = 'dv',\r\n  Dutch = 'nl',\r\n  English = 'en',\r\n  Estonian = 'et',\r\n  Faroese = 'fo',\r\n  Fijian = 'fj',\r\n  Filipino = 'fil',\r\n  Finnish = 'fi',\r\n  French = 'fr',\r\n  French_Canada = 'fr-CA',\r\n  Galician = 'gl',\r\n  Georgian = 'ka',\r\n  German = 'de',\r\n  Greek = 'el',\r\n  Gujarati = 'gu',\r\n  Haitian_Creole = 'ht',\r\n  Hebrew = 'he',\r\n  Hindi = 'hi',\r\n  Hmong_Daw = 'mww',\r\n  Hungarian = 'hu',\r\n  Icelandic = 'is',\r\n  Indonesian = 'id',\r\n  Inuinnaqtun = 'ikt',\r\n  Inuktitut = 'iu',\r\n  Inuktitut_Latin = 'iu-Latn',\r\n  Irish = 'ga',\r\n  Italian = 'it',\r\n  Japanese = 'ja',\r\n  Kannada = 'kn',\r\n  Kazakh = 'kk',\r\n  Khmer = 'km',\r\n  Klingon_Latin = 'tlh-Latn',\r\n  Korean = 'ko',\r\n  Kurdish_Central = 'ku',\r\n  Kurdish_Northern = 'kmr',\r\n  Kyrgyz = 'ky',\r\n  Lao = 'lo',\r\n  Latvian = 'lv',\r\n  Lithuanian = 'lt',\r\n  Macedonian = 'mk',\r\n  Malagasy = 'mg',\r\n  Malay = 'ms',\r\n  Malayalam = 'ml',\r\n  Maltese = 'mt',\r\n  Marathi = 'mr',\r\n  Mongolian_Cyrillic = 'mn-Cyrl',\r\n  Mongolian_Traditional = 'mn-Mong',\r\n  Myanmar_Burmese = 'my',\r\n  Māori = 'mi',\r\n  Nepali = 'ne',\r\n  Norwegian = 'nb',\r\n  Odia = 'or',\r\n  Pashto = 'ps',\r\n  Persian = 'fa',\r\n  Polish = 'pl',\r\n  Portuguese_Brazil = 'pt',\r\n  Portuguese_Portugal = 'pt-PT',\r\n  Punjabi = 'pa',\r\n  Querétaro_Otomi = 'otq',\r\n  Romanian = 'ro',\r\n  Russian = 'ru',\r\n  Samoan = 'sm',\r\n  Serbian_Cyrillic = 'sr-Cyrl',\r\n  Serbian_Latin = 'sr-Latn',\r\n  Slovak = 'sk',\r\n  Slovenian = 'sl',\r\n  Somali = 'so',\r\n  Spanish = 'es',\r\n  Swahili = 'sw',\r\n  Swedish = 'sv',\r\n  Tahitian = 'ty',\r\n  Tamil = 'ta',\r\n  Tatar = 'tt',\r\n  Telugu = 'te',\r\n  Thai = 'th',\r\n  Tibetan = 'bo',\r\n  Tigrinya = 'ti',\r\n  Tongan = 'to',\r\n  Turkish = 'tr',\r\n  Turkmen = 'tk',\r\n  Ukrainian = 'uk',\r\n  Upper_Sorbian = 'hsb',\r\n  Urdu = 'ur',\r\n  Uyghur = 'ug',\r\n  Uzbek_Latin = 'uz',\r\n  Vietnamese = 'vi',\r\n  Welsh = 'cy',\r\n  Yucatec_Maya = 'yua',\r\n  Zulu = 'zu',\r\n}\r\n\r\nexport const languages = GoogleTranslateLanguages;\r\n","import { LanguageCode, LanguageCodes, translatedObject } from '..';\r\nimport { error, messages, success } from '../utils/console';\r\nimport { getLanguageFromCode } from '../utils/micro';\r\nimport { getFile, getRootFolder, saveFilePublic } from './core';\r\nimport { objectTranslator } from './json_object';\r\n\r\nexport async function fileTranslator(\r\n  objectPath: string,\r\n  from: LanguageCode,\r\n  to: LanguageCode | LanguageCodes\r\n) {\r\n  let file_from_path = await getFileFromPath(objectPath);\r\n\r\n  let { json_obj } = file_from_path;\r\n  objectPath = file_from_path.objectPath;\r\n\r\n  if (json_obj === undefined) {\r\n    error(messages.file.no_file_in_path);\r\n    return;\r\n  }\r\n\r\n  json_obj = { data: JSON.parse(json_obj) };\r\n\r\n  let new_json_obj = await objectTranslator(json_obj, from, to);\r\n\r\n  if (new_json_obj === undefined) {\r\n    error(messages.file.cannot_translate);\r\n    return;\r\n  }\r\n\r\n  let latest_path = objectPath.replace(/\\\\/g, '/');\r\n  let root_folder = getRootFolder(latest_path);\r\n\r\n  if (Array.isArray(new_json_obj) === true && Array.isArray(to) === true) {\r\n    // multiple file saving\r\n    (new_json_obj as Array<translatedObject>).forEach(\r\n      async (element, index) => {\r\n        const current_json_obj = element.data;\r\n\r\n        let file_name = `/${to[index]}.json`;\r\n\r\n        await saveFilePublic(root_folder + file_name, current_json_obj);\r\n\r\n        success(\r\n          `For ${getLanguageFromCode(to[index])} --> ${to[index]}.json created.`\r\n        );\r\n      }\r\n    );\r\n  } else {\r\n    new_json_obj = (new_json_obj as translatedObject).data;\r\n\r\n    let file_name = `/${to}.json`;\r\n\r\n    await saveFilePublic(root_folder + file_name, new_json_obj);\r\n\r\n    success(`For ${getLanguageFromCode(to as string)} --> ${to}.json created.`);\r\n  }\r\n}\r\n\r\nexport async function getFileFromPath(\r\n  objectPath: string\r\n): Promise<{ json_obj: any; objectPath: string }> {\r\n  let json_obj: any = await getFile(objectPath);\r\n\r\n  if (json_obj === undefined) {\r\n    objectPath = __dirname + '\\\\' + objectPath;\r\n\r\n    json_obj = await getFile(objectPath);\r\n  }\r\n\r\n  return { json_obj, objectPath };\r\n}\r\n","import * as fs from 'fs';\r\nimport { error, success } from '../utils/console';\r\n\r\nexport async function readProxyFile(file_path: string) {\r\n  const confs = {\r\n    checkerRX: /^((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}:(\\d){1,}$/,\r\n  };\r\n  const data = await fs.promises.readFile(file_path, 'utf8');\r\n  if (!data) {\r\n    error('proxy file is empty!');\r\n    return;\r\n  }\r\n\r\n  let proxyList = data.split(/\\r?\\n/);\r\n\r\n  proxyList = proxyList.filter(proxy_item => confs.checkerRX.test(proxy_item));\r\n\r\n  success(`\\n---------------- Proxy Mode ----------------\\n`);\r\n  global.proxyList = proxyList;\r\n}\r\n","import { getLanguages, LanguageCodes, Sources } from '..';\r\nimport { fileTranslator, getFileFromPath } from '../core/json_file';\r\nimport {\r\n  commands,\r\n  error,\r\n  info,\r\n  language_choices,\r\n  messages,\r\n  success,\r\n  warn,\r\n} from '../utils/console';\r\nimport loading from 'loading-cli';\r\nimport { getCodeFromLanguage, translationStatistic } from '../utils/micro';\r\nimport { readProxyFile } from '../core/proxy_file';\r\nvar inquirer = require('inquirer');\r\n\r\nexport async function initializeCli() {\r\n  global.totalTranslation = 0;\r\n  global.totalTranslated = 0;\r\n  global.proxyIndex = 0;\r\n  global.proxyList = [];\r\n\r\n  const myArgs = process.argv.slice(2);\r\n  if (\r\n    myArgs.length === 0 ||\r\n    myArgs[0] === commands.help1 ||\r\n    myArgs[0] === commands.help2\r\n  ) {\r\n    help();\r\n    return;\r\n  }\r\n  translate();\r\n}\r\n\r\nexport async function help() {\r\n  success(messages.cli.welcome);\r\n  info(messages.cli.usage);\r\n}\r\n\r\nasync function translate() {\r\n  const myArgs = process.argv.slice(2);\r\n\r\n  if (myArgs[1] && typeof myArgs[1] === 'string') {\r\n    const file_path = myArgs[1];\r\n    await readProxyFile(file_path);\r\n  }\r\n\r\n  // no path condition\r\n  let objectPath = myArgs[0];\r\n  if (objectPath === undefined || objectPath === '') {\r\n    error(messages.file.no_path + ' ' + messages.cli.usage);\r\n    return;\r\n  }\r\n\r\n  // no file in the path condition\r\n  let { json_obj } = await getFileFromPath(objectPath);\r\n  if (json_obj === undefined) {\r\n    error(messages.file.no_file_in_path);\r\n    return;\r\n  }\r\n\r\n  let from!: string;\r\n  let to!: string[];\r\n\r\n  const source_choices = Object.entries(Sources).map(([key, _]) => {\r\n    return {\r\n      name: language_choices[key],\r\n      value: key,\r\n      short: key,\r\n    };\r\n  });\r\n\r\n  await inquirer\r\n    .prompt([\r\n      {\r\n        type: 'list',\r\n        name: 'source',\r\n        message: messages.cli.from_source,\r\n        pageSize: 20,\r\n        choices: [...source_choices, new inquirer.Separator()],\r\n      },\r\n    ])\r\n    .then((answers: any) => {\r\n      global.source = answers.source;\r\n    });\r\n\r\n  const { from_choices, to_choices } = getLanguageChoices();\r\n\r\n  await inquirer\r\n    .prompt([\r\n      {\r\n        type: 'list',\r\n        name: 'from',\r\n        message: messages.cli.from_message,\r\n        pageSize: 20,\r\n        choices: [...from_choices, new inquirer.Separator()],\r\n      },\r\n      {\r\n        type: 'checkbox',\r\n        name: 'to',\r\n        pageSize: 20,\r\n        message: messages.cli.to_message,\r\n        choices: to_choices,\r\n      },\r\n    ])\r\n    .then((answers: any) => {\r\n      from = answers.from;\r\n      to = answers.to;\r\n    });\r\n\r\n  if (to.length === 0 || to === undefined) {\r\n    warn(messages.cli.no_selected_language);\r\n    return;\r\n  }\r\n\r\n  const to_languages = to.map(language => (getLanguages() as any)[language]);\r\n\r\n  const load = loading({\r\n    text: `Translating. Please wait. ${translationStatistic(\r\n      global.totalTranslated,\r\n      global.totalTranslation\r\n    )}`,\r\n    color: 'yellow',\r\n    interval: 100,\r\n    stream: process.stdout,\r\n    frames: ['.', 'o', 'O', '°', 'O', 'o', '.'],\r\n  }).start();\r\n\r\n  const refreshInterval = setInterval(() => {\r\n    load.text = `Translating. Please wait. ${translationStatistic(\r\n      global.totalTranslated,\r\n      global.totalTranslation\r\n    )}`;\r\n  }, 200);\r\n\r\n  await fileTranslator(objectPath, getCodeFromLanguage(from), to_languages);\r\n\r\n  load.succeed(\r\n    `DONE! ${translationStatistic(\r\n      global.totalTranslation,\r\n      global.totalTranslation\r\n    )}`\r\n  );\r\n  clearInterval(refreshInterval);\r\n\r\n  info(messages.cli.creation_done);\r\n}\r\n\r\nfunction getLanguageChoices(): {\r\n  from_choices: LanguageCodes;\r\n  to_choices: LanguageCodes;\r\n} {\r\n  let from_choices = getFromChoices();\r\n  let to_choices = from_choices.filter(language => language !== `Automatic`);\r\n\r\n  return { from_choices, to_choices };\r\n}\r\n\r\nfunction getFromChoices(): LanguageCodes {\r\n  let languages = Object.entries(getLanguages() as any).map(([key, _]) => key);\r\n\r\n  return languages;\r\n}\r\n","import { initializeCli } from './cli/cli';\r\nimport { plaintranslate } from './core/translator';\r\nimport { fileTranslator } from './core/json_file';\r\nimport { objectTranslator } from './core/json_object';\r\n\r\nexport async function translateWord(\r\n  word: string,\r\n  from: LanguageCode,\r\n  to: LanguageCode\r\n) {\r\n  return await plaintranslate(word, from, to);\r\n}\r\n\r\nexport async function translateObject(\r\n  object: translatedObject,\r\n  from: LanguageCode,\r\n  to: LanguageCode | LanguageCodes\r\n): Promise<translatedObject | translatedObject[]> {\r\n  let hard_copy = JSON.parse(JSON.stringify(object));\r\n\r\n  return objectTranslator(hard_copy, from, to);\r\n}\r\n\r\nexport async function translateFile(\r\n  objectPath: string,\r\n  from: LanguageCode,\r\n  to: LanguageCode | LanguageCodes\r\n) {\r\n  return fileTranslator(objectPath, from, to);\r\n}\r\n\r\nexport async function runCli() {\r\n  initializeCli();\r\n}\r\n\r\nexport enum Sources {\r\n  GoogleTranslate = 'GoogleTranslate',\r\n  LibreTranslate = 'LibreTranslate',\r\n  ArgosTranslate = 'ArgosTranslate',\r\n  BingTranslate = 'BingTranslate',\r\n}\r\n\r\n// default\r\nglobal.source = Sources.GoogleTranslate;\r\n\r\n// TYPES\r\nexport interface translatedObject {\r\n  [key: string]: any;\r\n}\r\n\r\nexport type LanguageCode = string;\r\nexport type LanguageCodes = LanguageCode[];\r\n\r\nexport function getLanguages() {\r\n  if (global.source === Sources.LibreTranslate) {\r\n    return LibreTranslateLanguages;\r\n  } else if (global.source === Sources.ArgosTranslate) {\r\n    return ArgosTranslateLanguages;\r\n  } else if (global.source === Sources.BingTranslate) {\r\n    return BingTranslateLanguages;\r\n  }\r\n\r\n  return GoogleTranslateLanguages;\r\n}\r\n\r\nenum LibreTranslateLanguages {\r\n  Automatic = 'auto',\r\n  English = 'en',\r\n  Arabic = 'ar',\r\n  Azerbaijani = 'az',\r\n  Chinese = 'zh',\r\n  Czech = 'cs',\r\n  Danish = 'da',\r\n  Dutch = 'nl',\r\n  Esperanto = 'eo',\r\n  Finnish = 'fi',\r\n  French = 'fr',\r\n  German = 'de',\r\n  Greek = 'el',\r\n  Hebrew = 'iw',\r\n  Hindi = 'hi',\r\n  Hungarian = 'hu',\r\n  Indonesian = 'id',\r\n  Irish = 'ga',\r\n  Italian = 'it',\r\n  Japanese = 'ja',\r\n  Korean = 'ko',\r\n  Persian = 'fa',\r\n  Polish = 'pl',\r\n  Portuguese = 'pt',\r\n  Russian = 'ru',\r\n  Slovak = 'sk',\r\n  Spanish = 'es',\r\n  Swedish = 'sv',\r\n  Turkish = 'tr',\r\n  Ukrainian = 'uk',\r\n}\r\n\r\nenum ArgosTranslateLanguages {\r\n  Automatic = 'auto',\r\n  English = 'en',\r\n  Arabic = 'ar',\r\n  Chinese = 'zh',\r\n  French = 'fr',\r\n  German = 'de',\r\n  Hindi = 'hi',\r\n  Indonesian = 'id',\r\n  Irish = 'ga',\r\n  Italian = 'it',\r\n  Japanese = 'ja',\r\n  Korean = 'ko',\r\n  Polish = 'pl',\r\n  Portuguese = 'pt',\r\n  Russian = 'ru',\r\n  Spanish = 'es',\r\n  Turkish = 'tr',\r\n  Vietnamese = 'vi',\r\n}\r\n\r\nenum GoogleTranslateLanguages {\r\n  Automatic = 'auto',\r\n  Afrikaans = 'af',\r\n  Albanian = 'sq',\r\n  Amharic = 'am',\r\n  Arabic = 'ar',\r\n  Armenian = 'hy',\r\n  Azerbaijani = 'az',\r\n  Basque = 'eu',\r\n  Belarusian = 'be',\r\n  Bengali = 'bn',\r\n  Bosnian = 'bs',\r\n  Bulgarian = 'bg',\r\n  Catalan = 'ca',\r\n  Cebuano = 'ceb',\r\n  Chichewa = 'ny',\r\n  Chinese_Simplified = 'zh-CN',\r\n  Chinese_Traditional = 'zh-TW',\r\n  Corsican = 'co',\r\n  Croatian = 'hr',\r\n  Czech = 'cs',\r\n  Danish = 'da',\r\n  Dutch = 'nl',\r\n  English = 'en',\r\n  Esperanto = 'eo',\r\n  Estonian = 'et',\r\n  Filipino = 'tl',\r\n  Finnish = 'fi',\r\n  French = 'fr',\r\n  Frisian = 'fy',\r\n  Galician = 'gl',\r\n  Georgian = 'ka',\r\n  German = 'de',\r\n  Greek = 'el',\r\n  Gujarati = 'gu',\r\n  Haitian_Creole = 'ht',\r\n  Hausa = 'ha',\r\n  Hawaiian = 'haw',\r\n  Hebrew = 'iw',\r\n  Hindi = 'hi',\r\n  Hmong = 'hmn',\r\n  Hungarian = 'hu',\r\n  Icelandic = 'is',\r\n  Igbo = 'ig',\r\n  Indonesian = 'id',\r\n  Irish = 'ga',\r\n  Italian = 'it',\r\n  Japanese = 'ja',\r\n  Javanese = 'jw',\r\n  Kannada = 'kn',\r\n  Kazakh = 'kk',\r\n  Khmer = 'km',\r\n  Korean = 'ko',\r\n  Kurdish_Kurmanji = 'ku',\r\n  Kyrgyz = 'ky',\r\n  Lao = 'lo',\r\n  Latin = 'la',\r\n  Latvian = 'lv',\r\n  Lithuanian = 'lt',\r\n  Luxembourgish = 'lb',\r\n  Macedonian = 'mk',\r\n  Malagasy = 'mg',\r\n  Malay = 'ms',\r\n  Malayalam = 'ml',\r\n  Maltese = 'mt',\r\n  Maori = 'mi',\r\n  Marathi = 'mr',\r\n  Mongolian = 'mn',\r\n  Myanmar_Burmese = 'my',\r\n  Nepali = 'ne',\r\n  Norwegian = 'no',\r\n  Pashto = 'ps',\r\n  Persian = 'fa',\r\n  Polish = 'pl',\r\n  Portuguese = 'pt',\r\n  Punjabi = 'pa',\r\n  Romanian = 'ro',\r\n  Russian = 'ru',\r\n  Samoan = 'sm',\r\n  Scots_Gaelic = 'gd',\r\n  Serbian = 'sr',\r\n  Sesotho = 'st',\r\n  Shona = 'sn',\r\n  Sindhi = 'sd',\r\n  Sinhala = 'si',\r\n  Slovak = 'sk',\r\n  Slovenian = 'sl',\r\n  Somali = 'so',\r\n  Spanish = 'es',\r\n  Sundanese = 'su',\r\n  Swahili = 'sw',\r\n  Swedish = 'sv',\r\n  Tajik = 'tg',\r\n  Tamil = 'ta',\r\n  Telugu = 'te',\r\n  Thai = 'th',\r\n  Turkish = 'tr',\r\n  Ukrainian = 'uk',\r\n  Urdu = 'ur',\r\n  Uzbek = 'uz',\r\n  Vietnamese = 'vi',\r\n  Welsh = 'cy',\r\n  Xhosa = 'xh',\r\n  Yiddish = 'yi',\r\n  Yoruba = 'yo',\r\n  Zulu = 'zu',\r\n}\r\n\r\nenum BingTranslateLanguages {\r\n  Automatic = 'auto-detect',\r\n  Afrikaans = 'af',\r\n  Albanian = 'sq',\r\n  Amharic = 'am',\r\n  Arabic = 'ar',\r\n  Armenian = 'hy',\r\n  Assamese = 'as',\r\n  Azerbaijani = 'az',\r\n  Bangla = 'bn',\r\n  Bashkir = 'ba',\r\n  Basque = 'eu',\r\n  Bosnian = 'bs',\r\n  Bulgarian = 'bg',\r\n  Cantonese_Traditional = 'yue',\r\n  Catalan = 'ca',\r\n  Chinese_Literary = 'lzh',\r\n  Chinese_Simplified = 'zh-Hans',\r\n  Chinese_Traditional = 'zh-Hant',\r\n  Croatian = 'hr',\r\n  Czech = 'cs',\r\n  Danish = 'da',\r\n  Dari = 'prs',\r\n  Divehi = 'dv',\r\n  Dutch = 'nl',\r\n  English = 'en',\r\n  Estonian = 'et',\r\n  Faroese = 'fo',\r\n  Fijian = 'fj',\r\n  Filipino = 'fil',\r\n  Finnish = 'fi',\r\n  French = 'fr',\r\n  French_Canada = 'fr-CA',\r\n  Galician = 'gl',\r\n  Georgian = 'ka',\r\n  German = 'de',\r\n  Greek = 'el',\r\n  Gujarati = 'gu',\r\n  Haitian_Creole = 'ht',\r\n  Hebrew = 'he',\r\n  Hindi = 'hi',\r\n  Hmong_Daw = 'mww',\r\n  Hungarian = 'hu',\r\n  Icelandic = 'is',\r\n  Indonesian = 'id',\r\n  Inuinnaqtun = 'ikt',\r\n  Inuktitut = 'iu',\r\n  Inuktitut_Latin = 'iu-Latn',\r\n  Irish = 'ga',\r\n  Italian = 'it',\r\n  Japanese = 'ja',\r\n  Kannada = 'kn',\r\n  Kazakh = 'kk',\r\n  Khmer = 'km',\r\n  Klingon_Latin = 'tlh-Latn',\r\n  Korean = 'ko',\r\n  Kurdish_Central = 'ku',\r\n  Kurdish_Northern = 'kmr',\r\n  Kyrgyz = 'ky',\r\n  Lao = 'lo',\r\n  Latvian = 'lv',\r\n  Lithuanian = 'lt',\r\n  Macedonian = 'mk',\r\n  Malagasy = 'mg',\r\n  Malay = 'ms',\r\n  Malayalam = 'ml',\r\n  Maltese = 'mt',\r\n  Marathi = 'mr',\r\n  Mongolian_Cyrillic = 'mn-Cyrl',\r\n  Mongolian_Traditional = 'mn-Mong',\r\n  Myanmar_Burmese = 'my',\r\n  Māori = 'mi',\r\n  Nepali = 'ne',\r\n  Norwegian = 'nb',\r\n  Odia = 'or',\r\n  Pashto = 'ps',\r\n  Persian = 'fa',\r\n  Polish = 'pl',\r\n  Portuguese_Brazil = 'pt',\r\n  Portuguese_Portugal = 'pt-PT',\r\n  Punjabi = 'pa',\r\n  Querétaro_Otomi = 'otq',\r\n  Romanian = 'ro',\r\n  Russian = 'ru',\r\n  Samoan = 'sm',\r\n  Serbian_Cyrillic = 'sr-Cyrl',\r\n  Serbian_Latin = 'sr-Latn',\r\n  Slovak = 'sk',\r\n  Slovenian = 'sl',\r\n  Somali = 'so',\r\n  Spanish = 'es',\r\n  Swahili = 'sw',\r\n  Swedish = 'sv',\r\n  Tahitian = 'ty',\r\n  Tamil = 'ta',\r\n  Tatar = 'tt',\r\n  Telugu = 'te',\r\n  Thai = 'th',\r\n  Tibetan = 'bo',\r\n  Tigrinya = 'ti',\r\n  Tongan = 'to',\r\n  Turkish = 'tr',\r\n  Turkmen = 'tk',\r\n  Ukrainian = 'uk',\r\n  Upper_Sorbian = 'hsb',\r\n  Urdu = 'ur',\r\n  Uyghur = 'ug',\r\n  Uzbek_Latin = 'uz',\r\n  Vietnamese = 'vi',\r\n  Welsh = 'cy',\r\n  Yucatec_Maya = 'yua',\r\n  Zulu = 'zu',\r\n}\r\n\r\nexport const languages = GoogleTranslateLanguages;\r\n"],"names":["getLanguageFromCode","language_code","myEnum","getLanguages","enumValue","keys","Object","filter","x","length","getCodeFromLanguage","language","translationStatistic","totalTranslated","totalTranslation","success","message","console","log","error","info","warn","nonSafeTypes","language_choices","GoogleTranslate","BingTranslate","LibreTranslate","ArgosTranslate","messages","map","str","mapIgnoredValues","mapByDoubleBracket","replace","url","double_brackets_map","mapBySingleBracket","word","single_brackets_map","unMap","unmapIgnoredValues","unmapBySingleBracket","unmapByDoubleBracket","substring","start","end","replaced_start","replaced_end","counter","regex","RegExp","key","entries","getFile","_getFile","objectPath","json_file","undefined","_context","fs","then","data","_","getRootFolder","path","arr","split","pop","root","join","saveFilePublic","_saveFilePublic","json","JSON","stringify","_context2","safeValueTransition","value","value_safety","result","is_safe","type","empty","valueIsSafe","plaintranslate","_plaintranslate","from","to","_ignorer$map","ignorer","ignored_str","translateSourceFunction","global","source","translatedStr","Sources","translateWithLibre","translateWithArgos","translateWithBing","translateWithGoogle","_translateWithLibre","body","q","target","format","api_key","secret","axios","post","headers","Origin","translatedText","_translateWithArgos","_context3","Referer","_translateWithBing","_context4","bingTranslator","translation","_translateWithGoogle","proxyList","proxyIndex","_context5","proxy","agent","createHttpProxyAgent","translateWithGoogleByProxySupport","timeout","_translateWithGoogleByProxySupport","options","_context6","translate","text","LibreTranslateLanguages","ArgosTranslateLanguages","GoogleTranslateLanguages","BingTranslateLanguages","queue","TaskQueue","bluebirdPromise","objectTranslator","_objectTranslator","object","general_object","Promise","all","index","index_as_num","Number","copy_object","parse","deepDiver","Error","_deepDiver","has","prototype","hasOwnProperty","bind","k","add","err","fileTranslator","_fileTranslator","getFileFromPath","file_from_path","json_obj","new_json_obj","latest_path","root_folder","Array","isArray","forEach","element","current_json_obj","file_name","_getFileFromPath","__dirname","readProxyFile","_readProxyFile","file_path","confs","checkerRX","readFile","proxy_item","test","inquirer","require","initializeCli","_initializeCli","myArgs","process","argv","slice","help","_help","_translate","source_choices","name","short","prompt","pageSize","choices","Separator","answers","_getLanguageChoices","getLanguageChoices","from_choices","to_choices","to_languages","load","loading","color","interval","stream","stdout","frames","refreshInterval","setInterval","succeed","clearInterval","_translateWord","_translateObject","hard_copy","_translateFile","_runCli","languages"],"mappings":"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,OAAOC,SAAWE,EAAQrE,eACrB2G,EACEzC,OAAOC,SAAWE,EAAQpE,eAC5B2G,EACE1C,OAAOC,SAAWE,EAAQtE,cAC5B+G,EAGFD,WE3Da0C,MAAa,gCAgBlC,cAAA,OAAAC,eAhBM,WAA6BC,GAAiB,UAAA,6BAAA,OAAA,sBAAA,OAGlD,OAFKC,EAAQ,CACZC,UAAW,wDACZ3H,SACkBC,WAAY2H,SAASH,EAAW,QAAO,OAAhD,GAAJtH,UACGH,SAAA,MACuB,OAA9BvC,EAAM,2CAAwB,OAMhCqG,GAFIA,EAAY3D,EAAKK,MAAM,UAEL3D,QAAO,SAAAgL,GAAU,OAAIH,EAAMC,UAAUG,KAAKD,MAEhExK,sDACA6E,OAAO4B,UAAYA,EAAU,QAAA,UAAA,kDFiB/B,SAAYzB,GACVA,oCACAA,kCACAA,kCACAA,gCAJF,CAAYA,IAAAA,OAQZH,OAAOC,OAASE,EAAQvE,gBAsBxB,SAAK6G,GACHA,mBACAA,eACAA,cACAA,mBACAA,eACAA,aACAA,cACAA,aACAA,iBACAA,eACAA,cACAA,cACAA,aACAA,cACAA,aACAA,iBACAA,kBACAA,aACAA,eACAA,gBACAA,cACAA,eACAA,cACAA,kBACAA,eACAA,cACAA,eACAA,eACAA,eACAA,iBA9BF,CAAKA,IAAAA,OAiCL,SAAKC,GACHA,mBACAA,eACAA,cACAA,eACAA,cACAA,cACAA,aACAA,kBACAA,aACAA,eACAA,gBACAA,cACAA,cACAA,kBACAA,eACAA,eACAA,eACAA,kBAlBF,CAAKA,IAAAA,OAqBL,SAAKC,GACHA,mBACAA,iBACAA,gBACAA,eACAA,cACAA,gBACAA,mBACAA,cACAA,kBACAA,eACAA,eACAA,iBACAA,eACAA,gBACAA,gBACAA,6BACAA,8BACAA,gBACAA,gBACAA,aACAA,cACAA,aACAA,eACAA,iBACAA,gBACAA,gBACAA,eACAA,cACAA,eACAA,gBACAA,gBACAA,cACAA,aACAA,gBACAA,sBACAA,aACAA,iBACAA,cACAA,aACAA,cACAA,iBACAA,iBACAA,YACAA,kBACAA,aACAA,eACAA,gBACAA,gBACAA,eACAA,cACAA,aACAA,cACAA,wBACAA,cACAA,WACAA,aACAA,eACAA,kBACAA,qBACAA,kBACAA,gBACAA,aACAA,iBACAA,eACAA,aACAA,eACAA,iBACAA,uBACAA,cACAA,iBACAA,cACAA,eACAA,cACAA,kBACAA,eACAA,gBACAA,eACAA,cACAA,oBACAA,eACAA,eACAA,aACAA,cACAA,eACAA,cACAA,iBACAA,cACAA,eACAA,iBACAA,eACAA,eACAA,aACAA,aACAA,cACAA,YACAA,eACAA,iBACAA,YACAA,aACAA,kBACAA,aACAA,aACAA,eACAA,cACAA,YAzGF,CAAKA,IAAAA,OA4GL,SAAKC,GACHA,0BACAA,iBACAA,gBACAA,eACAA,cACAA,gBACAA,gBACAA,mBACAA,cACAA,eACAA,cACAA,eACAA,iBACAA,8BACAA,eACAA,yBACAA,+BACAA,gCACAA,gBACAA,aACAA,cACAA,aACAA,cACAA,aACAA,eACAA,gBACAA,eACAA,cACAA,iBACAA,eACAA,cACAA,wBACAA,gBACAA,gBACAA,cACAA,aACAA,gBACAA,sBACAA,cACAA,aACAA,kBACAA,iBACAA,iBACAA,kBACAA,oBACAA,iBACAA,4BACAA,aACAA,eACAA,gBACAA,eACAA,cACAA,aACAA,2BACAA,cACAA,uBACAA,yBACAA,cACAA,WACAA,eACAA,kBACAA,kBACAA,gBACAA,aACAA,iBACAA,eACAA,eACAA,+BACAA,kCACAA,uBACAA,gBACAA,cACAA,iBACAA,YACAA,cACAA,eACAA,cACAA,yBACAA,8BACAA,eACAA,2BACAA,gBACAA,eACAA,cACAA,6BACAA,0BACAA,cACAA,iBACAA,cACAA,eACAA,eACAA,eACAA,gBACAA,aACAA,aACAA,cACAA,YACAA,eACAA,gBACAA,cACAA,eACAA,eACAA,iBACAA,sBACAA,YACAA,cACAA,mBACAA,kBACAA,aACAA,qBACAA,YA/GF,CAAKA,IAAAA,OGrNL,ICmDKH,GAiCAC,GAqBAC,GA4GAC,GDrNDiD,GAAWC,QAAQ,YAEvB,SAAsBC,KAAa,gCAgBlC,cAAA,OAAAC,eAhBM,aAAA,MAAA,6BAAA,OAAA,sBAAA,OAM+B,GALpChG,OAAO9E,iBAAmB,EAC1B8E,OAAO/E,gBAAkB,EACzB+E,OAAO6B,WAAa,EACpB7B,OAAO4B,UAAY,GAIC,KAFdqE,EAASC,QAAQC,KAAKC,MAAM,IAEzBvL,QREF,WQDLoL,EAAO,IREF,OQDLA,EAAO,IAAqBnI,SAAA,MAErB,OAAPuI,wBAAO,OAGT9D,KAAY,OAAA,UAAA,iDAGd,SAAsB8D,KAAI,gCAGzB,cAAA,OAAAC,eAHM,aAAA,6BAAA,OAAA,sBAAA,OACLnL,4CACAK,EAAKQ,GAAoB,OAAA,UAAA,iDAC1B,SAEcuG,KAAS,gCAAA,cA2GvB,OA3GuBgE,eAAxB,aAAA,4BAAA,6BAAA,OAAA,sBAAA,OACsC,KAA9BN,EAASC,QAAQC,KAAKC,MAAM,IAEvB,IAA2B,iBAAdH,EAAO,IAAe5E,SAAA,MACjB,OAArBkE,EAAYU,EAAO,GAAE5E,SACrBgE,GAAcE,GAAU,OAIN,QACP1H,KADfF,EAAasI,EAAO,KACuB,KAAftI,GAAiB0D,SAAA,MACS,OAAxD9F,EAAMS,6BAA8BA,sBAAoB,OAAA,OAAAqF,UAKjCkD,GAAgB5G,GAAW,QAAtC,QACGE,WADX4G,UACoBpD,UAAA,MACa,OAArC9F,6DAAqC,QAarC,OANIiL,EAAiB9L,OAAO8C,QAAQ2C,GAASlE,KAAI,gBAAEsB,OACnD,MAAO,CACLkJ,KAAM9K,EAAiB4B,GACvB0B,MAAO1B,EACPmJ,MAAOnJ,MAET8D,UAEIwE,GACHc,OAAO,CACN,CACEtH,KAAM,OACNoH,KAAM,SACNrL,QRnCS,qBQoCTwL,SAAU,GACVC,kBAAaL,GAAgB,IAAIX,GAASiB,eAG7C9I,MAAK,SAAC+I,GACL/G,OAAOC,OAAS8G,EAAQ9G,UACxB,QAE4B,OAF5B+G,EAEiCC,KAA7BC,IAAAA,aAAcC,IAAAA,WAAU9F,UAE1BwE,GACHc,OAAO,CACN,CACEtH,KAAM,OACNoH,KAAM,OACNrL,QRlDU,uBQmDVwL,SAAU,GACVC,kBAAaK,GAAc,IAAIrB,GAASiB,aAE1C,CACEzH,KAAM,WACNoH,KAAM,KACNG,SAAU,GACVxL,QAASY,EACT6K,QAASM,KAGZnJ,MAAK,SAAC+I,GACLrH,EAAOqH,EAAQrH,KACfC,EAAKoH,EAAQpH,MACb,QAAA,GAEc,IAAdA,EAAG9E,aAAuBgD,IAAP8B,GAAgB0B,UAAA,MACG,OAAxC5F,ERhEE,mHQgEsC,QAsBnC,OAlBD2L,EAAezH,EAAG1D,KAAI,SAAAlB,GAAQ,OAAKR,KAAuBQ,MAE1DsM,EAAOC,EAAQ,CACnB9E,kCAAmCxH,EACjCgF,OAAO/E,gBACP+E,OAAO9E,kBAETqM,MAAO,SACPC,SAAU,IACVC,OAAQvB,QAAQwB,OAChBC,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,OACtC3K,QAEG4K,EAAkBC,aAAY,WAClCR,EAAK7E,kCAAoCxH,EACvCgF,OAAO/E,gBACP+E,OAAO9E,oBAER,KAAImG,UAEDgD,GAAe1G,EAAY7C,EAAoB4E,GAAO0H,GAAa,QAEzEC,EAAKS,iBACM9M,EACPgF,OAAO9E,iBACP8E,OAAO9E,mBAGX6M,cAAcH,GAEdpM,EAAKQ,GAA4B,QAAA,UAAA,iDAGnC,SAASiL,KAIP,IAAIC,EAOYxM,OAAO8C,QAAQjD,MAAuB0B,KAAI,YAAQ,eAN9DkL,EAAaD,EAAavM,QAAO,SAAAI,GAAQ,oBAAIA,KAEjD,MAAO,CAAEmM,aAAAA,EAAcC,WAAAA,GChJxB,cAAA,OAAAa,eANM,WACLvL,EACAiD,EACAC,GAAgB,6BAAA,OAAA,sBAAA,OAAA,OAAA7B,SAEH0B,EAAe/C,EAAMiD,EAAMC,GAAG,OAAA,iCAAA,OAAA,UAAA,iDAW5C,cAAA,OAAAsI,eARM,WACL/E,EACAxD,EACAC,GAAgC,MAAA,6BAAA,OAAA,sBAAA,OAEkB,OAA9CuI,EAAYrJ,KAAK6E,MAAM7E,KAAKC,UAAUoE,sBAEnCF,GAAiBkF,EAAWxI,EAAMC,IAAG,OAAA,UAAA,iDAS7C,cAAA,OAAAwI,eANM,WACLxK,EACA+B,EACAC,GAAgC,6BAAA,OAAA,sBAAA,OAAA,yBAEzB0E,GAAe1G,EAAY+B,EAAMC,IAAG,OAAA,UAAA,iDAK5C,cAAA,OAAAyI,eAFM,aAAA,6BAAA,OAAA,sBAAA,OACLrC,KAAgB,OAAA,UAAA,kDAGlB,SAAY5F,GACVA,oCACAA,kCACAA,kCACAA,gCAJF,CAAYA,kBAAAA,qBAQZH,OAAOC,OAASE,gBAAQvE,gBAsBxB,SAAK6G,GACHA,mBACAA,eACAA,cACAA,mBACAA,eACAA,aACAA,cACAA,aACAA,iBACAA,eACAA,cACAA,cACAA,aACAA,cACAA,aACAA,iBACAA,kBACAA,aACAA,eACAA,gBACAA,cACAA,eACAA,cACAA,kBACAA,eACAA,cACAA,eACAA,eACAA,eACAA,iBA9BF,CAAKA,KAAAA,QAiCL,SAAKC,GACHA,mBACAA,eACAA,cACAA,eACAA,cACAA,cACAA,aACAA,kBACAA,aACAA,eACAA,gBACAA,cACAA,cACAA,kBACAA,eACAA,eACAA,eACAA,kBAlBF,CAAKA,KAAAA,QAqBL,SAAKC,GACHA,mBACAA,iBACAA,gBACAA,eACAA,cACAA,gBACAA,mBACAA,cACAA,kBACAA,eACAA,eACAA,iBACAA,eACAA,gBACAA,gBACAA,6BACAA,8BACAA,gBACAA,gBACAA,aACAA,cACAA,aACAA,eACAA,iBACAA,gBACAA,gBACAA,eACAA,cACAA,eACAA,gBACAA,gBACAA,cACAA,aACAA,gBACAA,sBACAA,aACAA,iBACAA,cACAA,aACAA,cACAA,iBACAA,iBACAA,YACAA,kBACAA,aACAA,eACAA,gBACAA,gBACAA,eACAA,cACAA,aACAA,cACAA,wBACAA,cACAA,WACAA,aACAA,eACAA,kBACAA,qBACAA,kBACAA,gBACAA,aACAA,iBACAA,eACAA,aACAA,eACAA,iBACAA,uBACAA,cACAA,iBACAA,cACAA,eACAA,cACAA,kBACAA,eACAA,gBACAA,eACAA,cACAA,oBACAA,eACAA,eACAA,aACAA,cACAA,eACAA,cACAA,iBACAA,cACAA,eACAA,iBACAA,eACAA,eACAA,aACAA,aACAA,cACAA,YACAA,eACAA,iBACAA,YACAA,aACAA,kBACAA,aACAA,aACAA,eACAA,cACAA,YAzGF,CAAKA,KAAAA,QA4GL,SAAKC,GACHA,0BACAA,iBACAA,gBACAA,eACAA,cACAA,gBACAA,gBACAA,mBACAA,cACAA,eACAA,cACAA,eACAA,iBACAA,8BACAA,eACAA,yBACAA,+BACAA,gCACAA,gBACAA,aACAA,cACAA,aACAA,cACAA,aACAA,eACAA,gBACAA,eACAA,cACAA,iBACAA,eACAA,cACAA,wBACAA,gBACAA,gBACAA,cACAA,aACAA,gBACAA,sBACAA,cACAA,aACAA,kBACAA,iBACAA,iBACAA,kBACAA,oBACAA,iBACAA,4BACAA,aACAA,eACAA,gBACAA,eACAA,cACAA,aACAA,2BACAA,cACAA,uBACAA,yBACAA,cACAA,WACAA,eACAA,kBACAA,kBACAA,gBACAA,aACAA,iBACAA,eACAA,eACAA,+BACAA,kCACAA,uBACAA,gBACAA,cACAA,iBACAA,YACAA,cACAA,eACAA,cACAA,yBACAA,8BACAA,eACAA,2BACAA,gBACAA,eACAA,cACAA,6BACAA,0BACAA,cACAA,iBACAA,cACAA,eACAA,eACAA,eACAA,gBACAA,aACAA,aACAA,cACAA,YACAA,eACAA,gBACAA,cACAA,eACAA,eACAA,iBACAA,sBACAA,YACAA,cACAA,mBACAA,kBACAA,aACAA,qBACAA,YA/GF,CAAKA,KAAAA,QAkHL,IAAayF,GAAY1F,wBAhSzB,WACE,OAAI3C,OAAOC,SAAWE,gBAAQrE,eACrB2G,GACEzC,OAAOC,SAAWE,gBAAQpE,eAC5B2G,GACE1C,OAAOC,SAAWE,gBAAQtE,cAC5B+G,GAGFD,wCA/BT,WAA4B,uDAR5B,gBAAmC,yDAVnC,gBAAqC,uEARF"}